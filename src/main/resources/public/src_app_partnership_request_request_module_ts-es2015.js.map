{"version":3,"sources":["./src/app/partnership/request/form/request.form.component.ts","./src/app/partnership/request/form/request.form.component.html","./src/app/partnership/request/request-routing.module.ts","./src/app/partnership/request/request.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKwB;AACa;AACI;AAKuB;;;;;;;;;;;;;;;;ICSpB,iFAAyD;IAAA,uDAAW;IAAA,4DAAa;;;IAApC,uEAAW;IAAC,0DAAW;IAAX,2EAAW;;;IAExE,4EAAgD;IAAA,uDAAwC;;IAAA,4DAAY;;IAApD,0DAAwC;IAAxC,0JAAwC;;;IAcxF,4EAAsF;IAAA,uDAAyC;;IAAA,4DAAY;;IAArD,0DAAyC;IAAzC,2JAAyC;;;IAS3H,iFAAyD;IAAA,uDAAY;IAAA,4DAAa;;;IAAvC,yEAAa;IAAC,0DAAY;IAAZ,4EAAY;;;IAEzE,4EAA2D;IAAA,uDAAwC;;IAAA,4DAAY;;IAApD,0DAAwC;IAAxC,0JAAwC;;;IAOnG,4EAA4D;IAAA,uDAAwC;;IAAA,4DAAY;;IAApD,0DAAwC;IAAxC,0JAAwC;;ADlCrI,MAAM,oBAAoB;IAQ7B,sBAAsB;IACtB,8BAA8B;IAC9B,uCAAuC;IACvC,qCAAqC;IACrC,qCAAqC;IACrC,mBAAmB;IACnB,sBAAsB;IACtB,+BAA+B;IAC/B,0BAA0B;IAC1B,eAAe;IAEf,YAAoB,EAAe,EAAU,OAAwB,EAAU,KAAkB,EAAU,MAAc;QAArG,OAAE,GAAF,EAAE,CAAa;QAAU,YAAO,GAAP,OAAO,CAAiB;QAAU,UAAK,GAAL,KAAK,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAfzH,UAAK,GAAG,IAAI,uDAAW,EAAE,CAAC;QAC1B,eAAU,GAAG,EAAE,CAAC;QAChB,eAAU,GAAG,EAAE,CAAC;QAcZ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,oEAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;YACvC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,yDAAS,CAAC,EAAE,CAAC,EACpD,yCAAG,CAAC,KAAK,CAAC,EAAE;YACR,IAAG,OAAO,KAAK,KAAG,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC;gBACjD,OAAO,EAAE,CAAC;YACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,KAAK,KAAG,QAAQ,EAAC,MAAK,CAAC,WAAW,EAAE,EAAC,MAAK,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED,OAAO,CAAC,EAAE;QACN,IAAG,CAAC,EAAE;YACF,OAAO;QACX,OAAO,EAAE,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,OAAO,CAAC,CAAC,EAAE,CAAC;QACR,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,KAAG,CAAC,CAAC,EAAE,CAAC,EAAC,EAAC,KAAG,CAAC,CAAC;IACvD,CAAC;IAEO,KAAK,CAAC,KAAK,EAAE,IAAI;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE;YACtB,QAAQ,EAAE,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK;SAC1F,CAAC,CAAC;IACP,CAAC;IAEO,OAAO,CAAC,GAAG;QACf,IAAI,CAAC,KAAK,CAAC,UAAU,EAAC,uCAAuC,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,8BAA8B,CAAC,EAAC,EAAC,KAAK,EAAC,EAAC,QAAQ,EAAE,GAAG,EAAC,EAAC,CAAC,CAAC;IACnF,CAAC;IAEO,KAAK,CAAC,GAAsB;QAChC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAC,uEAAuE,CAAC,CAAC;QAC7F,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,EAAO;QACV,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAC3B,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAC1B,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAC3B,CAAC;IACN,CAAC;;wFAvEQ,oBAAoB;kHAApB,oBAAoB;QCrBjC,6EAAyB;QACrB,yEAA6B;QACzB,yEAA0B;QACtB,yEAAiB;QACb,yEAAqD;QACjD,wEAAuB;QAAA,uDAA8C;;QAAA,4DAAK;QAC1E,gEAAK;QACT,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,yEAA0B;QACtB,uEAAK;QACD,0EAAkB;QACd,0EAAkB;QACd,2EAAmD;QAA5B,6IAAU,wBAAgB,IAAC;QAC9C,0EAAiB;QACb,2EAAoB;QAChB,sFAAgE;QAC5D,6EAAW;QAAA,wDAAuB;;QAAA,4DAAY;QAC9C,wEAAoF;QACpF,4FAAwF;QACpF,iIAAiF;;QACrF,4DAAmB;QACnB,+HAAoG;QACxG,4DAAiB;QACrB,4DAAM;QACV,4DAAM;QACN,0EAAiB;QACb,2EAAmB;QACf,sFAAgE;QAC5D,6EAAW;QAAA,wDAA8B;;QAAA,4DAAY;QACrD,4FAA6C;QACzC,wEAAiF;QACjF,wEAA4E;QAChF,4DAAuB;QACvB,wFAAwE;QACxE,8FAAuD;QACvD,+HAA2I;QAE/I,4DAAiB;QACrB,4DAAM;QACN,2EAAmB;QACf,sFAAgE;QAC5D,6EAAW;QAAA,wDAAsD;;QAAA,4DAAY;QAC7E,kFAAuF;QACnF,6EAAoC;QACpC,iIAAkF;QACtF,4DAAa;QACb,+HAA+G;QACnH,4DAAiB;QACrB,4DAAM;QACN,2EAAmB;QACf,sFAAgE;QAC5D,6EAAW;QAAA,wDAAqC;;QAAA,4DAAY;QAC5D,wEAA2E;QAC3E,+HAAgH;QACpH,4DAAiB;QACrB,4DAAM;QACV,4DAAM;QACN,0EAAiB;QACb,2EAA0D;QACtD,2EAAgC;QAC5B,2EAAgC;QAC5B,8EAAiF;QAAA,wDAAsB;;QAAA,4DAAS;QAEpH,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAU;;;;QAtEiC,0DAA8C;QAA9C,iKAA8C;QAS3D,0DAAgB;QAAhB,6EAAgB;QAIK,0DAAuB;QAAvB,2IAAuB;QACN,0DAAqB;QAArB,kFAAqB;QACe,0DAAuB;QAAvB,oFAAuB;QACzD,0DAAiB;QAAjB,kJAAiB;QAEnC,0DAAkC;QAAlC,kGAAkC;QAOnC,0DAA8B;QAA9B,kJAA8B;QACnB,0DAAsB;QAAtB,4EAAsB;QAIX,0DAAc;QAAd,oEAAc;QAEnC,0DAAwE;QAAxE,4IAAwE;QAMzE,0DAAsD;QAAtD,0KAAsD;QACrC,0DAAuB;QAAvB,oFAAuB;QAEnB,0DAAa;QAAb,mFAAa;QAEjC,0DAA6C;QAA7C,6GAA6C;QAK9C,0DAAqC;QAArC,yJAAqC;QAEpC,0DAA8C;QAA9C,8GAA8C;QAQZ,0DAAe;QAAf,4EAAe;QAAwB,0DAAsB;QAAtB,0IAAsB;;;;;;;;;;;;;;;;;;;;;AC9D5F;AACY;AACF;;;AAEjE,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,8EAAoB;KAClC;IACD;QACI,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,2EAAiB;KAC/B;CACJ,CAAC;AAMK,MAAM,oBAAoB;;wFAApB,oBAAoB;iHAApB,oBAAoB;qHAHtB,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEX,oBAAoB,oFAFrB,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBuB;AACmB;AACT;AACQ;AACC;AACT;AACO;AACL;AACJ;AACI;AACA;AACJ;AACM;AACwB;AACtB;AACG;AACY;AACvB;AACA;AACH;AACO;AACU;AACP;AACK;AACC;;AAqC7D,MAAM,aAAa;;0EAAb,aAAa;0GAAb,aAAa;+GALX;QACP,2EAAe;KAClB,YA5BQ;YACL,yDAAY;YACZ,uDAAW;YACX,+DAAmB;YACnB,mEAAc;YACd,2EAAkB;YAClB,4EAAkB;YAClB,mEAAc;YACd,2EAAiB;YACjB,sEAAe;YACf,kEAAa;YACb,sEAAe;YACf,kEAAa;YACb,wEAAgB;YAChB,sEAAe;YACf,8EAAmB;YACnB,0EAAiB;YACjB,kEAAa;YACb,6EAAuB;YACvB,kEAAa;YACb,yFAAwB;YACxB,iEAAe;YACf,wEAAkB;YAClB,kFAAqB;YACrB,yEAAoB;SACvB;mIAMQ,aAAa,mBAjClB,8EAAoB,aAGpB,yDAAY;QACZ,uDAAW;QACX,+DAAmB;QACnB,mEAAc;QACd,2EAAkB;QAClB,4EAAkB;QAClB,mEAAc;QACd,2EAAiB;QACjB,sEAAe;QACf,kEAAa;QACb,sEAAe;QACf,kEAAa;QACb,wEAAgB;QAChB,sEAAe;QACf,8EAAmB;QACnB,0EAAiB;QACjB,kEAAa;QACb,6EAAuB;QACvB,kEAAa;QACb,yFAAwB;QACxB,iEAAe;QACf,wEAAkB;QAClB,kFAAqB;QACrB,yEAAoB","file":"src_app_partnership_request_request_module_ts-es2015.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../../../core/service/training.service\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './request.form.component.html'\n})\n\nexport class RequestFormComponent implements OnInit {\n\n    fg: FormGroup;\n    topics: Observable<Topic[]>;\n    topic = new FormControl();\n    topicArray = [];\n    categories = [];\n\n    // place: Institution;\n    // parent = new FormControl();\n    // locationAddress = new FormControl();\n    // places: Observable<Institution[]>;\n    // locations: Observable<Location[]>;\n    // placeArray = [];\n    // locationArray = [];\n    // isIdentifierDuplicated = [];\n    // isEmailDuplicated = [];\n    // msg: string;\n\n    constructor(private fb: FormBuilder, private service: TrainingService, private snack: MatSnackBar, private router: Router){\n        this.fg = this.fb.group(new Training({}));\n    }\n\n    ngOnInit(){\n        this.service.categories().subscribe((res)=>{\n            this.categories = res;\n        });\n        this.topics = this.topic.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.topics(typeof value==='string'?value.toLowerCase():value.title).subscribe((res)=>{\n                    this.topicArray = res;\n                });\n                return this.topicArray;\n            })\n        );\n    }\n\n    display(ob): string {\n        if(!ob)\n            return;\n        return ob.title;\n    }\n\n    compare(a, b): boolean {\n        return a && b ?(a.id && b.id && a.id===b.id):a===b;\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(res){\n        this.toast('bg-green','The usr has been successfully created');\n        this.router.navigate(['partnership/request/timeline'],{state:{training: res}});\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    submit(ob: any): void {\n        ob.topic = this.topic.value;\n        this.service.save(ob).subscribe(\n            (res) => this.success(res),\n            (err) => this.error(err)\n        );\n    }\n\n\n\n    //\n\n\n    //\n\n    //\n    // back(){\n    //     this.router.navigate(['configuration/institution/page']);\n    // }\n    //\n    // get managers(): FormArray {\n    //     return this.fg.get('managers') as FormArray;\n    // }\n    //\n    // private chkIdent(arr, index){\n    //     const ident = arr[index].identifier;\n    //     this.isIdentifierDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].identifier===ident){\n    //             this.isIdentifierDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         }\n    //     }\n    //     this.service.getPerson(ident).subscribe(res => {\n    //         if(res != null){\n    //             this.pull(index);\n    //             this.managers.controls.unshift(this.fb.group(res));\n    //         }\n    //     });\n    //\n    // }\n    //\n    // private chkEmail(arr, index){\n    //     const mail = arr[index].email;\n    //     this.isEmailDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].email===mail){\n    //             this.isEmailDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         }\n    //     }\n    //     this.service.getPerson(mail).subscribe(res => {\n    //         if(res != null){\n    //             this.managers.controls[index].setValue(this.fb.group(res));\n    //         }\n    //     });\n    // }\n    //\n    // check(index, field){\n    //     let arr = this.managers.getRawValue();\n    //     return field==='identifier'?this.chkIdent(arr, index):this.chkEmail(arr, index);\n    //\n    // }\n    //\n    // push(){\n    //     this.managers.controls.unshift(this.fb.group(new Person({})));\n    // }\n    //\n    // pull(index: number): void {\n    //     if (this.managers.length > 1)\n    //         this.managers.removeAt(index);\n    // }\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{'training.partnership.request' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Topic' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"topic\" [matAutocomplete]=\"auto\" required>\n                                        <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let t of topics | async\" [value]=\"t\">{{t.title}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"fg.get('topic').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'whish period' | translate}}</mat-label>\n                                        <mat-date-range-input [rangePicker]=\"picker\">\n                                            <input required matStartDate formControlName=\"startDate\" placeholder=\"From Date\">\n                                            <input required matEndDate  formControlName=\"endDate\" placeholder=\"To Date\">\n                                        </mat-date-range-input>\n                                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                        <mat-date-range-picker #picker></mat-date-range-picker>\n                                        <mat-error *ngIf=\"fg.get('startDate').hasError('') || fg.get('endDate').hasError('')\">{{'Both dates are required' | translate}}</mat-error>\n\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-6\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'training.configuration.list.category' | translate}}</mat-label>\n                                        <mat-select required=\"true\" [compareWith]=\"compare\" formControlName=\"attendeeCategory\">\n                                            <mat-option [value]=\"\"></mat-option>\n                                            <mat-option *ngFor=\"let cat of categories\" [value]=\"cat\">{{cat.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('attendeeCategory').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Number of attendees' | translate}}</mat-label>\n                                        <input type=\"number\" matInput formControlName=\"numberOfAttendees\" required>\n                                        <mat-error *ngIf=\"fg.get('numberOfAttendees').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Send\" | translate}}</button>\n                                            <!--<button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>-->\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {RequestFormComponent} from \"./form/request.form.component\";\r\nimport {TimelineComponent} from \"../timeline/timeline.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RequestFormComponent,\r\n    },\r\n    {\r\n        path: 'timeline',\r\n        component: TimelineComponent,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RequestRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport {MatDatepickerModule, MatDateRangePicker} from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\r\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\r\nimport {RequestRoutingModule} from \"./request-routing.module\";\r\nimport {RequestFormComponent} from \"./form/request.form.component\";\r\nimport {TrainingService} from \"../../core/service/training.service\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        RequestFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        MaterialFileInputModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        TranslateModule,\r\n        NgxDatatableModule,\r\n        MatAutocompleteModule,\r\n        RequestRoutingModule\r\n    ],\r\n    providers: [\r\n        TrainingService\r\n    ]\r\n})\r\n\r\nexport class RequestModule {}\r\n"],"sourceRoot":"webpack:///"}