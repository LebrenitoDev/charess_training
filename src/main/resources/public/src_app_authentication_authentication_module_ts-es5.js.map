{"version":3,"sources":["webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/locked/locked.component.html","webpack:///src/app/authentication/locked/locked.component.ts","webpack:///src/app/authentication/page500/page500.component.ts","webpack:///src/app/authentication/page500/page500.component.html","webpack:///src/app/authentication/reset-password/reset-password.component.html","webpack:///src/app/authentication/reset-password/reset-password.component.ts","webpack:///src/app/authentication/signin/signin.component.html","webpack:///src/app/authentication/signin/signin.component.ts","webpack:///src/app/authentication/signup/signup.component.html","webpack:///src/app/authentication/signup/signup.component.ts"],"names":["routes","path","redirectTo","pathMatch","component","SigninComponent","SignupComponent","ForgotPasswordComponent","ResetPasswordComponent","LockedComponent","Page404Component","Page500Component","AuthenticationRoutingModule","RouterModule","AuthenticationModule","AccountService","MatSnackBarModule","CommonModule","FormsModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatIconModule","MatButtonModule","MatSelectModule","formBuilder","route","router","service","submitted","msg","authForm","group","email","Validators","returnUrl","snapshot","queryParams","controls","invalid","value","forgotPassword","subscribe","data","navigate","err","console","log","onSubmit","authService","hide","password","userImg","currentUserValue","img","userFullName","person","firstName","lastName","role","profile","Role","fb","fm","newPassword","confirmPassword","validator","confirmedValidator","controlName","matchingControlName","formGroup","control","matchingControl","errors","setErrors","usr","resetPassword","id","page","loading","error","username","subs","sink","login","f","res","status","UnsubscribeOnDestroyAdapter","snack","chide","institutions","fg","locale","institution","getInstitutions","create","getRawValue","open","duration","verticalPosition","horizontalPosition","panelClass"],"mappings":"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","file":"src_app_authentication_authentication_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport {ResetPasswordComponent} from \"./reset-password/reset-password.component\";\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'signin',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'signin',\r\n    component: SigninComponent,\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignupComponent,\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent,\r\n  },\r\n  {\r\n    path: 'reset-password',\r\n    component: ResetPasswordComponent,\r\n  },\r\n  {\r\n    path: 'locked',\r\n    component: LockedComponent,\r\n  },\r\n  {\r\n    path: 'page404',\r\n    component: Page404Component,\r\n  },\r\n  {\r\n    path: 'page500',\r\n    component: Page500Component,\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatSelectModule} from \"@angular/material/select\";\r\nimport {AccountService} from \"../configuration/account/account.service\";\r\nimport {ResetPasswordComponent} from \"./reset-password/reset-password.component\";\r\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        Page500Component,\r\n        Page404Component,\r\n        SigninComponent,\r\n        SignupComponent,\r\n        LockedComponent,\r\n        ForgotPasswordComponent,\r\n        ResetPasswordComponent\r\n    ],\r\n    imports: [\r\n        MatSnackBarModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        AuthenticationRoutingModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSelectModule,\r\n    ],\r\n    providers: [\r\n        AccountService\r\n    ]\r\n\r\n})\r\n\r\nexport class AuthenticationModule {}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img bg\" style=\"background-image: url(assets/images/pages/bg-01.png);\"></div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <h2 class=\"welcome-msg\"> Reset Password </h2>\r\n          <p class=\"auth-signup-text text-muted\">Let Us Help You</p>\r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n                  Enter your registered email address.\r\n                </span>\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Email</mat-label>\r\n                  <input matInput formControlName=\"email\" required>\r\n                  <mat-icon matSuffix>mail</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('email').hasError('required') || authForm.get('email').touched\">\r\n                    Please enter a valid email address\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <span *ngIf=\"msg\" style=\"color: red;\">Email not found or invalid status. Please contact the system administrator!!!</span>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\r\n                Reset My Password\r\n              </button>\r\n            </div>\r\n            <div class=\"w-full p-t-25 text-center\">\r\n              <div>\r\n                <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n                  Login?\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {AccountService} from \"../../configuration/account/account.service\";\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['./forgot-password.component.scss'],\r\n})\r\n\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    authForm: FormGroup;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    msg = false;\r\n\r\n    constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, public service: AccountService){}\r\n\r\n    ngOnInit(){\r\n        this.authForm = this.formBuilder.group({\r\n            email: ['', [Validators.required, Validators.email, Validators.minLength(5)], ],\r\n        });\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    get f() {\r\n        return this.authForm.controls;\r\n    }\r\n\r\n    onSubmit(){\r\n        if(this.authForm.invalid){\r\n            return;\r\n        } else {\r\n            const email = this.authForm.value.email;\r\n            this.service.forgotPassword(email).subscribe(\r\n                data => {\r\n                    this.router.navigate(['/authentication/signin']);\r\n                },\r\n                (err: HttpErrorResponse) => {\r\n                    this.msg = true;\r\n                    console.log(err);\r\n                }\r\n        );\r\n\r\n        }\r\n        this.submitted = true;\r\n    }\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/bg-01.png);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"auth-locked\">\r\n              <div class=\"image\">\r\n                <img src={{userImg}} alt=\"User\">\r\n              </div>\r\n            </div>\r\n            <span class=\"auth-locked-title p-b-34 p-t-27\">\r\n              {{userFullName}}\r\n            </span>\r\n            <div class=\"text-center\">\r\n              <p class=\"txt1 p-b-20\">\r\n                Locked\r\n              </p>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n                  Enter your password here.\r\n                </span>\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\">\r\n                    {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\r\n                    Password is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \"\r\n                type=\"submit\">\r\n                Reset My Password\r\n              </button>\r\n            </div>\r\n            <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n              <div>\r\n                <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n                  Need Help?\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/core/service/auth.service';\r\nimport { Role } from 'src/app/core/models/security/role';\r\n@Component({\r\n  selector: 'app-locked',\r\n  templateUrl: './locked.component.html',\r\n  styleUrls: ['./locked.component.scss'],\r\n})\r\nexport class LockedComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  submitted = false;\r\n  userImg: string;\r\n  userFullName: string;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n  ngOnInit() {\r\n    this.authForm = this.formBuilder.group({\r\n      password: ['', Validators.required],\r\n    });\r\n    this.userImg = this.authService.currentUserValue.img;\r\n    this.userFullName =\r\n      this.authService.currentUserValue.person.firstName +\r\n      ' ' +\r\n      this.authService.currentUserValue.person.lastName;\r\n  }\r\n  get f() {\r\n    return this.authForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.authForm.invalid) {\r\n      return;\r\n    } else {\r\n      const role = this.authService.currentUserValue.profile.role;\r\n      if (role === Role.SUPER || role === Role.ADMIN) {\r\n        this.router.navigate(['/admin/dashboard/main']);\r\n      } else if (role === Role.TRAINER) {\r\n        this.router.navigate(['/teacher/dashboard']);\r\n      } else if (role === Role.ATTENDEE) {\r\n        this.router.navigate(['/student/dashboard']);\r\n      } else {\r\n        this.router.navigate(['/authentication/signin']);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page500',\r\n  templateUrl: './page500.component.html',\r\n  styleUrls: ['./page500.component.scss'],\r\n})\r\nexport class Page500Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/bg-05.png);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <form>\r\n            <span class=\"error-header p-b-45\">\r\n              500\r\n            </span>\r\n            <span class=\"error-subheader2 p-b-5\">\r\n              Oops, Something went wrong. Please try after some times.\r\n            </span>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" type=\"submit\">\r\n                Go To Home Page\r\n              </button>\r\n            </div>\r\n            <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n              <div>\r\n                <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n                  Need Help?\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","<div class=\"auth-container\">\n    <div class=\"row auth-main\">\n        <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n            <div class=\"left-img bg\" style=\"background-image: url(assets/images/pages/bg-01.png);\"></div>\n        </div>\n        <div class=\"col-sm-6 auth-form-section\">\n            <div class=\"form-section\">\n                <div class=\"auth-wrapper\" align=\"center\">\n                    <div><img src=\"assets/images/favicon.png\" width=\"100\" height=\"100\"/></div><br/>\n                    <h2 class=\"welcome-msg\">Reset Password </h2>\n                    <br/><br/>\n                    <form class=\"validate-form\" [formGroup]=\"fm\" (ngSubmit)=\"onSubmit()\">\n                        <div class=\"row\">\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                    <mat-label>New password</mat-label>\n                                    <input matInput formControlName=\"newPassword\" [type]=\"'password'\" required>\n                                    <mat-error *ngIf=\"fm.get('newPassword').hasError('required')\">Password is required</mat-error>\n                                    <mat-error *ngIf=\"fm.get('newPassword').hasError('minlength')\">Passsword needs to have 6 characters minimum</mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                    <mat-label>Confirm password</mat-label>\n                                    <input matInput formControlName=\"confirmPassword\" [type]=\"'password'\" required>\n                                    <mat-error *ngIf=\"fm.get('confirmPassword').hasError('required')\">Password is required</mat-error>\n                                    <mat-error *ngIf=\"fm.get('confirmPassword').hasError('confirmedValidator')\">Passwords do not match</mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <br/>\n                        <div class=\"container-auth-form-btn\">\n                            <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!fm.valid \" type=\"submit\">\n                                Reset\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {AccountService} from \"../../configuration/account/account.service\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {AuthService} from \"../../core/service/auth.service\";\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.scss'],\n})\n\nexport class ResetPasswordComponent implements OnInit {\n    fm: FormGroup;\n    submitted = false;\n    returnUrl: string;\n\n    constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router,\n                public service: AccountService, private authService: AuthService){}\n\n    ngOnInit(){\n        this.fm = this.fb.group({\n            newPassword: ['', [Validators.required, Validators.minLength(5)]],\n            confirmPassword: ['', [Validators.required]],\n        },\n        {validator: this.confirmedValidator('newPassword', 'confirmPassword')});\n\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    confirmedValidator(controlName: string, matchingControlName: string){\n        return (formGroup: FormGroup) => {\n            const control = formGroup.controls[controlName];\n            const matchingControl = formGroup.controls[matchingControlName];\n            if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\n                return;\n            }\n            if (control.value !== matchingControl.value) {\n                matchingControl.setErrors({ confirmedValidator: true });\n            } else {\n                matchingControl.setErrors(null);\n            }\n        }\n    }\n\n    get f() {\n        return this.fm.controls;\n    }\n\n    onSubmit(){\n        this.submitted = true;\n        if(this.fm.invalid){\n            return;\n        } else {\n            const usr = this.authService.currentUserValue;\n            const password = this.fm.value.newPassword;\n            console.log('====', usr);\n            this.service.resetPassword(usr.id, password).subscribe(\n                data => {\n                    const page = usr?.profile?.page;\n                    this.router.navigate([page]);\n                },\n                (err: HttpErrorResponse) => console.log(err)\n            );\n        }\n    }\n}\n","<div class=\"auth-container\">\r\n    <div class=\"row auth-main\">\r\n        <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n            <div class=\"left-img bg\" style=\"background-image: url(assets/images/pages/bg-01.png);\"></div>\r\n        </div>\r\n        <div class=\"col-sm-6 auth-form-section\">\r\n            <div class=\"form-section\">\r\n                <div class=\"auth-wrapper\" align=\"center\">\r\n                    <div>\r\n                        <img src=\"assets/images/favicon.png\" width=\"100\" height=\"100\"/>\r\n                    </div>\r\n                    <br/>\r\n                    <h2 class=\"welcome-msg\"> Welcome to CHARESS</h2>\r\n                    <p class=\"auth-signup-text text-muted\">Need an account?<a routerLink=\"/authentication/signup\" class=\"sign-up-link\">Sign Up</a></p>\r\n\r\n                    <h2 class=\"login-title\">Sign in</h2>\r\n                    <form class=\"validate-form\" [formGroup]=\"fm\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Username</mat-label>\r\n                                    <input matInput formControlName=\"username\" /> <mat-icon matSuffix>face</mat-icon>\r\n                                    <mat-error *ngIf=\"fm.get('username').hasError('required')\">Username is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Password</mat-label>\r\n                                    <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\r\n                                    <a class=\"show-pwd-icon\" href=\"#\" onClick=\"return false;\" matSuffix (click)=\"hide = !hide\"  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n                                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                                    </a>\r\n                                    <mat-error *ngIf=\"fm.get('password').hasError('required')\">Password is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"d-flex justify-content-between align-items-center mb-5\">\r\n                            <div class=\"form-check\">\r\n                                <label class=\"form-check-label\">\r\n                                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\"> Remember me\r\n                                    <span class=\"form-check-sign\"><span class=\"check\"></span></span>\r\n                                </label>\r\n                            </div>\r\n                            <a class=\"txt1\" routerLink=\"/authentication/forgot-password\">Forgot Password?</a>\r\n                        </div>\r\n                        <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-0\">Invalid username and/or password</div>\r\n                        <div class=\"container-auth-form-btn\">\r\n                            <div style=\"text-align:center\">\r\n                                <button mat-raised-button color=\"primary\" [class.auth-spinner]=\"loading\" [disabled]=\"loading\"\r\n                                        class=\"auth-form-btn\" [disabled]=\"!fm.valid \" type=\"submit\">Sign In</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/core/service/auth.service';\r\nimport { UnsubscribeOnDestroyAdapter } from 'src/app/shared/UnsubscribeOnDestroyAdapter';\r\n\r\n@Component({\r\n    selector: 'app-signin',\r\n    templateUrl: './signin.component.html',\r\n    styleUrls: ['./signin.component.scss'],\r\n})\r\n\r\nexport class SigninComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\r\n    fm: FormGroup;\r\n    submitted = false;\r\n    loading = false;\r\n    error = '';\r\n    hide = true;\r\n\r\n    constructor(private formBuilder: FormBuilder, private route: ActivatedRoute,  private router: Router, private authService: AuthService) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required],\r\n        });\r\n    }\r\n\r\n    get f() {\r\n        return this.fm.controls;\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.loading = true;\r\n        this.error = '';\r\n\r\n        if (this.fm.invalid) {\r\n            this.error = 'Invalid username and/or password!!';\r\n            return;\r\n        }\r\n\r\n        this.subs.sink = this.authService.login(this.f.username.value, this.f.password.value).subscribe(\r\n            (res) => {\r\n                this.loading = false;\r\n                const page = 'USER_PENDING'===this.authService.currentUserValue.status?'/authentication/reset-password':this.authService.currentUserValue?.profile?.page;\r\n                this.router.navigate([page]);\r\n            },\r\n            (err) => {\r\n                this.loading = false;\r\n                this.error = 'Invalid username and/or password!!';\r\n                console.error(err, 'from signin component')\r\n            }\r\n        );\r\n    }\r\n}\r\n","<div class=\"auth-container\">\r\n    <div class=\"row auth-main\">\r\n        <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n            <div class=\"left-img bg\" style=\"background-image: url(assets/images/pages/bg-01.png);\"></div>\r\n        </div>\r\n        <div class=\"col-sm-6 auth-form-section\">\r\n            <div class=\"form-section\">\r\n                <div class=\"auth-wrapper\" align=\"center\">\r\n                    <div><img src=\"assets/images/favicon.png\" width=\"100\" height=\"100\"/></div><br/>\r\n                    <h2 class=\"welcome-msg\"> Sign Up </h2>\r\n                    <form class=\"validate-form\" [formGroup]=\"fg\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\r\n                                    <mat-label>First name</mat-label>\r\n                                    <input matInput formControlName=\"firstName\" required>\r\n                                    <mat-error *ngIf=\"fg.get('person.firstName').hasError('required')\">First name is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\r\n                                    <mat-label>Last name</mat-label>\r\n                                    <input matInput formControlName=\"lastName\" required>\r\n                                    <mat-error *ngIf=\"fg.get('person.lastName').hasError('required')\">Last name is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Username</mat-label>\r\n                                    <input matInput formControlName=\"username\" required>\r\n                                    <mat-error *ngIf=\"fg.get('username').hasError('required')\">Username is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Password</mat-label>\r\n                                    <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n                                    <mat-error *ngIf=\"fg.get('password').hasError('required')\">Password is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Confirm Password</mat-label>\r\n                                    <input matInput formControlName=\"confirmPassword\" [type]=\"chide ? 'password' : 'text'\" required>\r\n                                    <mat-error *ngIf=\"fg.get('confirmPassword').hasError('required')\">Password is required</mat-error>\r\n                                    <mat-error *ngIf=\"fg.get('confirmPassword').hasError('confirmedValidator')\">Passwords do not match</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Favorite language</mat-label>\r\n                                    <mat-select formControlName=\"locale\" required>\r\n                                        <mat-option [value]=\"'en'\">Anglais</mat-option>\r\n                                        <mat-option [value]=\"'fr'\">Français</mat-option>\r\n                                        <mat-option [value]=\"'kr'\">Créole Haïtien</mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"fg.get('locale').hasError('required')\">Language is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\r\n                                    <mat-label>Email</mat-label>\r\n                                    <input matInput formControlName=\"email\" required>\r\n                                    <mat-error *ngIf=\"fg.get('person.email').hasError('required') || fg.get('person.email').touched\">Please enter a valid email address</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                    <mat-label>Place of work</mat-label>\r\n                                    <mat-select formControlName=\"institution\" required>\r\n                                        <mat-option *ngFor=\"let institution of institutions\" [value]=\"institution\">{{institution.name}}</mat-option>\r\n                                    </mat-select>\r\n                                    <mat-error *ngIf=\"fg.get('institution').hasError('required')\">Place of work is required</mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"flex-sb-m w-full  p-b-20\">\r\n                            <div>\r\n                              <span>Already Registered? <a routerLink=\"/authentication/signin\">Login</a></span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"container-auth-form-btn\">\r\n                            <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!fg.valid \" type=\"submit\">\r\n                              Register\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {AccountService} from \"../../configuration/account/account.service\";\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    selector: 'app-signup',\r\n    templateUrl: './signup.component.html',\r\n    styleUrls: ['./signup.component.scss'],\r\n})\r\n\r\nexport class SignupComponent implements OnInit {\r\n    fg: FormGroup;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    hide = true;\r\n    chide = true;\r\n    institutions=[];\r\n\r\n    constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router, public service: AccountService, private snack: MatSnackBar){\r\n        this.fg = this.fb.group({\r\n            username: ['', Validators.required],\r\n            locale: ['', [Validators.required]],\r\n            institution: ['', [Validators.required]],\r\n            password: ['', Validators.required],\r\n            confirmPassword: ['', Validators.required],\r\n            person: this.fb.group({\r\n                firstName: ['', [Validators.required]],\r\n                lastName: ['', [Validators.required]],\r\n                email: ['', [Validators.required, Validators.email, Validators.minLength(5)]]\r\n            })\r\n        },\r\n            {validator: this.confirmedValidator('password', 'confirmPassword')});\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    ngOnInit(){\r\n        this.service.getInstitutions().subscribe((res)=>{\r\n            this.institutions = res;\r\n        });\r\n    }\r\n\r\n    confirmedValidator(controlName: string, matchingControlName: string){\r\n        return (formGroup: FormGroup) => {\r\n            const control = formGroup.controls[controlName];\r\n            const matchingControl = formGroup.controls[matchingControlName];\r\n            if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\r\n                return;\r\n            }\r\n            if (control.value !== matchingControl.value) {\r\n                matchingControl.setErrors({ confirmedValidator: true });\r\n            } else {\r\n                matchingControl.setErrors(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    get f() {\r\n        return this.fg.controls;\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.service.create(this.fg.getRawValue()).subscribe(\r\n            data => {\r\n                this.snack.open('Your account has been successfully created. But you must contact a system administrator to get it activated. You are unable to connect with an unactivated account', '', {\r\n                    duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: 'bg-green',\r\n                });\r\n                this.router.navigate(['/authentication/signin']);\r\n            },\r\n            (err: HttpErrorResponse) => console.log(err)\r\n        );\r\n    }\r\n}\r\n"]}