{"version":3,"sources":["./src/app/configuration/account/account-routing.module.ts","./src/app/configuration/account/account.module.ts","./src/app/configuration/account/form/account.form.component.ts","./src/app/configuration/account/form/account.form.component.html","./src/app/configuration/account/page/account.page.component.ts","./src/app/configuration/account/page/account.page.component.html","./src/app/core/models/security/person.ts","./src/app/core/models/security/user.ts"],"names":[],"mappings":"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","file":"src_app_configuration_account_account_module_ts-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AccountPageComponent} from \"./page/account.page.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'page',\r\n        component: AccountPageComponent\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\n\r\nexport class AccountRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\r\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\r\nimport {AccountRoutingModule} from \"./account-routing.module\";\r\nimport {AccountPageComponent} from \"./page/account.page.component\";\r\nimport {AccountService} from \"./account.service\";\r\nimport {AccountFormComponent} from \"./form/account.form.component\";\r\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\r\nimport {PerfectScrollbarModule} from \"ngx-perfect-scrollbar\";\r\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AccountPageComponent,\r\n        AccountFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        MaterialFileInputModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        TranslateModule,\r\n        NgxDatatableModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n        PerfectScrollbarModule,\r\n        AccountRoutingModule,\r\n        NgbModule\r\n    ],\r\n    providers: [\r\n        AccountService\r\n    ]\r\n})\r\n\r\nexport class AccountModule {}\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Component, Inject, OnInit, ViewChild} from '@angular/core';\nimport {\n    FormGroup,\n    FormBuilder, Validators, FormControl,\n} from '@angular/forms';\n\nimport { Observable, map, startWith } from 'rxjs';\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {AccountService} from \"../account.service\";\nimport {User} from \"../../../core/models/security/user\";\nimport {Profile} from \"../../../core/models/security/profile\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './account.form.component.html'\n})\n\nexport class AccountFormComponent implements OnInit {\n\n    action: string;\n    title: string;\n    fg: FormGroup;\n    usr: User;\n    profiles=[];\n    institutions=[];\n\n    constructor(public fm: MatDialogRef<AccountFormComponent>, @Inject(MAT_DIALOG_DATA) public data: any, public service: AccountService,\n                private fb: FormBuilder, private snack: MatSnackBar, private router: Router){\n        this.action = data.action;\n        if (this.action === 'edit') {\n            this.usr = data.usr;\n            this.title = 'Edit the current usr';\n        } else{\n            this.title = 'New account';\n            this.usr = new User({});\n        }\n        this.fg = this.create();\n    }\n\n    ngOnInit() {\n        this.service.getProfiles().subscribe((res)=>{\n            this.profiles = res;\n        });\n        this.service.getInstitutions().subscribe((res)=>{\n            this.institutions = res;\n        });\n    }\n\n    _filter(value: string): Profile[] {\n        return this.profiles.filter(profile=>profile.name.toLowerCase().includes(typeof value === 'string'?value.toLowerCase():value));\n    }\n\n    display(profile):string {\n        if(profile)\n            return profile.name;\n    }\n\n    create(): FormGroup {\n        return this.fb.group({\n            id: [this.usr.id],\n            username: [this.usr.username, [Validators.required]],\n            locale: [this.usr.locale, [Validators.required]],\n            profile: [this.usr.profile],\n            status: [this.usr.status],\n            institution: [this.usr.institution, [Validators.required]],\n            person: this.fb.group({\n                id: [this.usr.person.id],\n                firstName: [this.usr.person.firstName, [Validators.required]],\n                lastName: [this.usr.person.lastName, [Validators.required]],\n                email: [this.usr.person.email, [Validators.required]],\n            })\n        });\n    }\n\n    compare(a, b): boolean {\n        return a && b ?(a.id && b.id && a.id===b.id):a===b;\n    }\n\n    submit() {\n        this.service.create(this.fg.getRawValue()).subscribe(\n            data => {\n                this.success();\n                this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n                    this.router.navigate(['/configuration/account/page']);\n                });\n            },\n            (err: HttpErrorResponse) => this.error(err)\n        );\n    }\n\n    cancel(): void {\n        this.fm.close();\n    }\n\n    private success(){\n        this.toast('bg-green','The usr has been successfully created');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n}\n","<div class=\"addContainer\">\n    <div class=\"modalHeader\">\n        <div class=\"editRowModal\">\n            <div class=\"modalHeader clearfix\">\n                <div class=\"modal-about\">\n                    <div><h4><strong>{{title | translate}}</strong></h4></div>\n                </div>\n            </div>\n        </div>\n        <button mat-icon-button (click)=\"fm.close()\" aria-label=\"Close dialog\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <div mat-dialog-content>\n        <form class=\"register-form m-4\" [formGroup]=\"fg\" (ngSubmit)=\"submit\">\n            <div class=\"row\">\n                <input matInput formControlName=\"id\" [hidden]=true>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'First Name' | translate}}</mat-label>\n                        <input matInput formControlName=\"firstName\" required>\n                        <mat-error *ngIf=\"fg.get('person.firstName').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                        <input matInput formControlName=\"id\" [hidden]=true>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'Last Name' | translate}}</mat-label>\n                        <input matInput formControlName=\"lastName\" required>\n                        <mat-error *ngIf=\"fg.get('person.lastName').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Username' | translate}}</mat-label>\n                        <input matInput formControlName=\"username\" required>\n                        <mat-error *ngIf=\"fg.get('username').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-3\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Locale' | translate}}</mat-label>\n                        <mat-select formControlName=\"locale\" required>\n                            <mat-option [value]=\"'en'\">Anglais</mat-option>\n                            <mat-option [value]=\"'fr'\">Français</mat-option>\n                            <mat-option [value]=\"'kr'\">Créole Haïtien</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"fg.get('locale').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-5\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Profile' | translate}}</mat-label>\n                        <mat-select [compareWith]=\"compare\" formControlName=\"profile\">\n                            <mat-option *ngFor=\"let pro of profiles\" [value]=\"pro\">{{pro.name}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'Email' | translate}}</mat-label>\n                        <input matInput formControlName=\"email\" required>\n                        <mat-error *ngIf=\"fg.get('person.email').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Place of work' | translate}}</mat-label>\n                        <mat-select [compareWith]=\"compare\" formControlName=\"institution\" required>\n                            <mat-option *ngFor=\"let institution of institutions\" [value]=\"institution\">{{institution.name}}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"fg.get('institution').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                    <div class=\"example-button-row\">\n                        <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\" [mat-dialog-close]=\"1\"\n                                (click)=\"submit()\">{{'Save' | translate}}</button>\n                        <button mat-raised-button color=\"warn\" (click)=\"cancel()\" tabindex=\"-1\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { UnsubscribeOnDestroyAdapter } from 'src/app/shared/UnsubscribeOnDestroyAdapter';\nimport {AccountService} from \"../account.service\";\nimport {User} from \"../../../core/models/security/user\";\nimport {AccountFormComponent} from \"../form/account.form.component\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './account.page.component.html'\n})\n\nexport class AccountPageComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'select',\n        'username',\n        'fullname',\n        'profile',\n        'email',\n        'locale',\n        'status',\n        'institution'\n    ];\n    database: AccountService | null;\n    datasource: Source | null;\n    selection = new SelectionModel<User>(true, []);\n    usr: User | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: AccountService, private router: Router){\n        super();\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new AccountService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n        this.factory.getProfiles().subscribe((res)=>{\n            this.profiles = res;\n        });\n    }\n\n    add(){\n        this.dialog.open(AccountFormComponent, {\n            ...this.dim,\n            data: {\n                usr: this.usr,\n                action: 'add',\n            }\n        });\n    }\n\n    edit() {\n        const row = this.selection.selected[0];\n        this.dialog.open(AccountFormComponent, {\n            ...this.dim,\n            data: {\n                usr: row,\n                action: 'edit',\n            }\n        });\n    }\n\n    update(ob, tp){\n        if(!ob)\n            return;\n        let users = [];\n        this.selection.selected.forEach((u) => {\n            if(tp === 'status') {\n                if(u.status != ob){\n                    u.status = ob;\n                }\n            } else if(tp === 'profile'){\n                if(!u.profile || u.profile.id != ob.id){\n                    u.profile = ob;\n                    u.status = 'USER_ACTIVE';\n                }\n            } else {\n                if(u.status ==='USER_ACTIVE'){\n                    u.status = 'USER_PENDING';\n                }\n            }\n            users.push(u);\n        });\n        this.change(users);\n    }\n\n    change(array){\n        if(array.length > 0){\n            this.factory.update(array).subscribe(\n                data => {\n                    this.success();\n                    this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n                        this.router.navigate(['/configuration/account/page']);\n                    });\n                },\n                (err: HttpErrorResponse) => this.error(err)\n            );\n        }\n    }\n\n    chg(ob){\n        switch (ob) {\n            case 'USER_ACTIVE':\n                return 'Actif';\n            case 'USER_LOCKED':\n                return 'Vérouillé';\n            case 'USER_PENDING':\n                return 'Pendant';\n            case 'USER_INACTIVE':\n                return 'Inactif';\n        }\n    }\n\n    private success(){\n        this.toast('bg-green','Operation successfully terminated');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','Operation failed! Please, contact your sys admin');\n        console.error(err);\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right',panelClass: color,\n        });\n    }\n\n    isAllSelected() {\n        const numSelected = this.selection.selected.length;\n        const numRows = this.datasource.renderedData.length;\n        return numSelected === numRows;\n    }\n\n    masterToggle() {\n        this.isAllSelected()? this.selection.clear(): this.datasource.renderedData.forEach((row) => this.selection.select(row));\n    }\n}\n\n\nexport class Source extends DataSource<User> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: User[] = [];\n    renderedData: User[] = [];\n\n    constructor(public service: AccountService, public paginator: MatPaginator, public ms: MatSort){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<User[]>{\n        const displayDataChanges = [\n            this.service.dataChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n        this.service.getUsers();\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.data\n                    .slice()\n                    .filter((usr: User) => {\n                        const search = (\n                            usr.username\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: User[]): User[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'username':\n                    [propertyA, propertyB] = [a.username, b.username];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{'training.configuration.list.account' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                        </div>\n                                        <div class=\"col-4\">\n                                            <ul class=\"header-buttons\">\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab (click)=\"update('password', 'password')\" matTooltip=\"Réinitialiser mot de passe\">\n                                                            <mat-icon class=\"col-white\">restart_alt</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li ngbDropdown [hidden]=!selection.hasValue()>\n                                                    <div class=\"icon-button-demo nav-notification-icons pt-0\" ngbDropdownToggle>\n                                                        <button mat-mini-fab color=\"white\" matTooltip=\"Profile d'utilisateur\">\n                                                            <mat-icon>format_list_bulleted</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                    <div ngbDropdownMenu class=\"downlist\">\n                                                        <ul class=\"menu\">\n                                                            <li class=\"body\"><a href=\"#\" *ngFor=\"let p of profiles\" (click)=\"update(p, 'profile')\">{{p.name}}</a></li>\n                                                        </ul>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"update('USER_ACTIVE', 'status')\" matTooltip=\"Activer\">\n                                                            <mat-icon class=\"col-white\">notifications</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab color=\"warn\" (click)=\"update('USER_INACTIVE', 'status')\" matTooltip=\"Désactiver\">\n                                                            <mat-icon class=\"col-white\">notifications_off</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=\"selection.selected.length !== 1\">\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"edit()\" matTooltip=\"Editer\">\n                                                            <mat-icon class=\"col-white\">edit</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=selection.hasValue()>\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"add()\" matTooltip=\"Ajouter\">\n                                                            <mat-icon class=\"col-white\">add</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <ng-container matColumnDef=\"select\">\n                                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                                                          [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"username\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Username'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.username}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"fullname\" >\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'user.fullname'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">{{row.person.fullname}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"profile\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Profile'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.profile?.name}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"institution\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Place of work'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.institution?.name}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Status'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{chg(row.status)}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"email\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Email'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.person.email}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"locale\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Locale'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">{{row.locale=='en'?'Anglais':(row.locale=='fr'?'Fran&ccedil;ais':'Créole Haïtien')}}</mat-cell>\n                                    </ng-container>\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import * as moment from 'moment';\n\nexport class Person {\n    id: number;\n    identifier: string;\n    firstName: string;\n    lastName: string;\n    gender: string;\n    phone: string;\n    email: string;\n    birthDate: moment.Moment;\n    locationAddress: Location;\n    textAddress: string;\n    fullname: string;\n    alias: string;\n\n    constructor(person) {\n        {\n            this.id = person.id;\n            this.identifier = person.identifier;\n            this.firstName = person.firstName;\n            this.lastName = person.lastName;\n            this.gender = person.gender;\n        }\n    }\n}","import { Profile } from './profile';\r\nimport { Locale } from './locale';\r\nimport { Person } from './person';\r\nimport {Institution} from \"../../../configuration/institution/institution.model\";\r\n\r\nexport class User {\r\n    id: number;\r\n    username: string;\r\n    person: Person;\r\n    locale: Locale;\r\n    status: string;\r\n    profile?: Profile;\r\n    institution?: Institution;\r\n    img?: string;\r\n    token?: string;\r\n\r\n    constructor(usr) {\r\n        {\r\n            this.id = usr?.id;\r\n            this.username = usr?.username;\r\n            this.profile = usr?.profile;\r\n            this.institution = usr?.institution;\r\n            this.status = usr.status;\r\n            this.person = usr.person?usr.person:new Person({});\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"],"sourceRoot":"webpack:///"}