{"version":3,"sources":["webpack:///src/app/partnership/request/form/request.form.component.html","webpack:///src/app/partnership/request/form/request.form.component.ts","webpack:///src/app/partnership/request/request-routing.module.ts","webpack:///src/app/partnership/request/request.module.ts"],"names":["RequestFormComponent","fb","service","snack","router","topic","FormControl","topicArray","categories","fg","group","Training","subscribe","res","topics","valueChanges","pipe","startWith","map","value","trim","length","toLowerCase","title","ob","a","b","id","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","toast","navigate","state","training","err","console","error","save","success","submit","routes","path","component","TimelineComponent","RequestRoutingModule","RouterModule","RequestModule","TrainingService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","MatAutocompleteModule"],"mappings":"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","file":"src_app_partnership_request_request_module_ts-es5.js","sourcesContent":["<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{'training.partnership.request' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Topic' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"topic\" [matAutocomplete]=\"auto\" required>\n                                        <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let t of topics | async\" [value]=\"t\">{{t.title}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"fg.get('topic').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'whish period' | translate}}</mat-label>\n                                        <mat-date-range-input [rangePicker]=\"picker\">\n                                            <input required matStartDate formControlName=\"startDate\" placeholder=\"From Date\">\n                                            <input required matEndDate  formControlName=\"endDate\" placeholder=\"To Date\">\n                                        </mat-date-range-input>\n                                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                        <mat-date-range-picker #picker></mat-date-range-picker>\n                                        <mat-error *ngIf=\"fg.get('startDate').hasError('') || fg.get('endDate').hasError('')\">{{'Both dates are required' | translate}}</mat-error>\n\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-6\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'training.configuration.list.category' | translate}}</mat-label>\n                                        <mat-select required=\"true\" [compareWith]=\"compare\" formControlName=\"attendeeCategory\">\n                                            <mat-option [value]=\"\"></mat-option>\n                                            <mat-option *ngFor=\"let cat of categories\" [value]=\"cat\">{{cat.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('attendeeCategory').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Number of attendees' | translate}}</mat-label>\n                                        <input type=\"number\" matInput formControlName=\"numberOfAttendees\" required>\n                                        <mat-error *ngIf=\"fg.get('numberOfAttendees').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Send\" | translate}}</button>\n                                            <!--<button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>-->\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../../../core/service/training.service\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './request.form.component.html'\n})\n\nexport class RequestFormComponent implements OnInit {\n\n    fg: FormGroup;\n    topics: Observable<Topic[]>;\n    topic = new FormControl();\n    topicArray = [];\n    categories = [];\n\n    // place: Institution;\n    // parent = new FormControl();\n    // locationAddress = new FormControl();\n    // places: Observable<Institution[]>;\n    // locations: Observable<Location[]>;\n    // placeArray = [];\n    // locationArray = [];\n    // isIdentifierDuplicated = [];\n    // isEmailDuplicated = [];\n    // msg: string;\n\n    constructor(private fb: FormBuilder, private service: TrainingService, private snack: MatSnackBar, private router: Router){\n        this.fg = this.fb.group(new Training({}));\n    }\n\n    ngOnInit(){\n        this.service.categories().subscribe((res)=>{\n            this.categories = res;\n        });\n        this.topics = this.topic.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.topics(typeof value==='string'?value.toLowerCase():value.title).subscribe((res)=>{\n                    this.topicArray = res;\n                });\n                return this.topicArray;\n            })\n        );\n    }\n\n    display(ob): string {\n        if(!ob)\n            return;\n        return ob.title;\n    }\n\n    compare(a, b): boolean {\n        return a && b ?(a.id && b.id && a.id===b.id):a===b;\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(res){\n        this.toast('bg-green','The usr has been successfully created');\n        this.router.navigate(['partnership/request/timeline'],{state:{training: res}});\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    submit(ob: any): void {\n        ob.topic = this.topic.value;\n        this.service.save(ob).subscribe(\n            (res) => this.success(res),\n            (err) => this.error(err)\n        );\n    }\n\n\n\n    //\n\n\n    //\n\n    //\n    // back(){\n    //     this.router.navigate(['configuration/institution/page']);\n    // }\n    //\n    // get managers(): FormArray {\n    //     return this.fg.get('managers') as FormArray;\n    // }\n    //\n    // private chkIdent(arr, index){\n    //     const ident = arr[index].identifier;\n    //     this.isIdentifierDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].identifier===ident){\n    //             this.isIdentifierDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         }\n    //     }\n    //     this.service.getPerson(ident).subscribe(res => {\n    //         if(res != null){\n    //             this.pull(index);\n    //             this.managers.controls.unshift(this.fb.group(res));\n    //         }\n    //     });\n    //\n    // }\n    //\n    // private chkEmail(arr, index){\n    //     const mail = arr[index].email;\n    //     this.isEmailDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].email===mail){\n    //             this.isEmailDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         }\n    //     }\n    //     this.service.getPerson(mail).subscribe(res => {\n    //         if(res != null){\n    //             this.managers.controls[index].setValue(this.fb.group(res));\n    //         }\n    //     });\n    // }\n    //\n    // check(index, field){\n    //     let arr = this.managers.getRawValue();\n    //     return field==='identifier'?this.chkIdent(arr, index):this.chkEmail(arr, index);\n    //\n    // }\n    //\n    // push(){\n    //     this.managers.controls.unshift(this.fb.group(new Person({})));\n    // }\n    //\n    // pull(index: number): void {\n    //     if (this.managers.length > 1)\n    //         this.managers.removeAt(index);\n    // }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {RequestFormComponent} from \"./form/request.form.component\";\r\nimport {TimelineComponent} from \"../timeline/timeline.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RequestFormComponent,\r\n    },\r\n    {\r\n        path: 'timeline',\r\n        component: TimelineComponent,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RequestRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport {MatDatepickerModule, MatDateRangePicker} from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\r\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\r\nimport {RequestRoutingModule} from \"./request-routing.module\";\r\nimport {RequestFormComponent} from \"./form/request.form.component\";\r\nimport {TrainingService} from \"../../core/service/training.service\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        RequestFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        MaterialFileInputModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        TranslateModule,\r\n        NgxDatatableModule,\r\n        MatAutocompleteModule,\r\n        RequestRoutingModule\r\n    ],\r\n    providers: [\r\n        TrainingService\r\n    ]\r\n})\r\n\r\nexport class RequestModule {}\r\n"]}