{"version":3,"sources":["webpack:///src/app/core/models/training/partner.training.participants.ts","webpack:///src/app/partnership/participants/participants.module.ts","webpack:///src/app/partnership/participants/participants.routing.module.ts","webpack:///src/app/partnership/participants/submission/submission.participants.component.html","webpack:///src/app/partnership/participants/submission/submission.participants.component.ts","webpack:///src/app/partnership/participants/training/participants.training.component.html","webpack:///src/app/partnership/participants/training/participants.training.component.ts"],"names":["PartnerTrainingParticipants","t","id","training","partner","participants","ParticipantsModule","TrainingService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","MatTooltipModule","MatAutocompleteModule","PerfectScrollbarModule","NgbModule","ParticipantsRoutingModule","ParticipantsTrainingComponent","SubmissionParticipantsComponent","routes","path","component","RouterModule","fb","router","service","snack","state","getCurrentNavigation","extras","trainingPartner","JSON","parse","localStorage","getItem","startDate","Date","endDate","partnerTrainingParticpants","array","group","Person","map","p","fg","get","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","toast","back","err","console","error","ob","getRawValue","participate","subscribe","res","success","navigate","controls","unshift","index","length","removeAt","submit","http","dialog","factory","auth","displayedColumns","profiles","dim","width","height","contextMenuPosition","x","y","currentUserValue","institution","database","datasource","Source","paginator","sort","subs","sink","fromEvent","filter","nativeElement","value","load","row","setItem","stringify","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","ms","filterChange","BehaviorSubject","filteredData","renderedData","pageIndex","next","displayDataChanges","dataPartnerChange","sortChange","page","getTrainingsForAPartner","merge","pipe","partnerData","slice","tp","search","topic","title","toLowerCase","indexOf","sortedData","sortData","startIndex","pageSize","splice","data","active","direction","a","b","propertyA","propertyB","valueA","isNaN","valueB","DataSource"],"mappings":"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","file":"src_app_partnership_participants_participants_module_ts-es5.js","sourcesContent":["import {Institution} from \"../security/institution\";\nimport {Training} from \"./training\";\n\nexport class PartnerTrainingParticipants {\n    id: number;\n    training: Training;\n    partner: Institution;\n    participants: [{Person}];\n\n    constructor(t) {\n        {\n            this.id = t.id;\n            this.training = t.training;\n            this.partner = t.partner;\n            this.participants = t.participants;\n        }\n    }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MaterialFileInputModule} from 'ngx-material-file-input';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {PerfectScrollbarModule} from \"ngx-perfect-scrollbar\";\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\nimport {ParticipantsRoutingModule} from \"./participants.routing.module\";\nimport {ParticipantsTrainingComponent} from \"./training/participants.training.component\";\nimport {TrainingService} from \"../../organisation/training/training.service\";\nimport {SubmissionParticipantsComponent} from \"./submission/submission.participants.component\";\n\n@NgModule({\n    declarations: [\n        ParticipantsTrainingComponent,\n        SubmissionParticipantsComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSnackBarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        MatSortModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        MaterialFileInputModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        TranslateModule,\n        NgxDatatableModule,\n        MatTooltipModule,\n        MatAutocompleteModule,\n        PerfectScrollbarModule,\n        NgbModule,\n        ParticipantsRoutingModule\n    ],\n    providers: [TrainingService]\n})\n\nexport class ParticipantsModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ParticipantsTrainingComponent} from \"./training/participants.training.component\";\nimport {SubmissionParticipantsComponent} from \"./submission/submission.participants.component\";\n\nconst routes: Routes = [\n    {\n        path: 'submission',\n        component: SubmissionParticipantsComponent,\n    },\n    {\n        path: '',\n        component: ParticipantsTrainingComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\n\nexport class ParticipantsRoutingModule {}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{partner?partner.name:''}}: {{'Participants Submission' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-1\">\n                                    <i [ngClass]=\"['material-icons-two-tone', 'icon']\">subject</i>\n                                </div>\n                                <div class=\"col-11\">\n                                    <div class=\"row title\">{{training?.topic?.fullname}}</div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">Nombre maximum de participants: <span class=\"corps\">{{training?.capacity}}</span></div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">\n                                            Date de début: <span class=\"corps\">{{startDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\n                                            Date de fin: <span class=\"corps\">{{endDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">Catégorie de professionels attendue:\n                                            <span class=\"corps\" *ngFor=\"let category of training?.categories; index as i\">\n                                            {{i===0?category.name: (i===training.categories.length-1?' et ' + category.name: ' , ' + category.name)}}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">\n                                            Lieu de formation: <span class=\"corps\">{{training?.location.fullname}}</span> se trouvant (au/à/aux) <span class=\"corps\">{{training?.location.address}}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <br/>\n                            <fieldset>\n                                <div class=\"row\">\n                                    <legend>{{\"Participants\" | translate}}</legend>\n                                    <ng-container formArrayName=\"participants\" *ngFor=\"let person of participants.controls; index as i\">\n                                        <ng-container [formGroupName]=\"i\">\n                                            <div class=\"col-2\">\n                                                <mat-form-field class=\"example-full-width mb-2\">\n                                                    <mat-label>{{\"Numéro d'Identifiant Fiscal\" | translate}}</mat-label>\n                                                    <input matInput mask=\"000-000-000-0\" formControlName=\"identifier\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width mb-2\">\n                                                    <mat-label>{{\"Phone\"| translate}}</mat-label>\n                                                    <input matInput formControlName=\"phone\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-3\">\n                                                <mat-form-field class=\"example-full-width mb-3\">\n                                                    <mat-label>{{\"Email\"| translate}}</mat-label>\n                                                    <input matInput formControlName=\"email\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-3\">\n                                                <mat-form-field class=\"example-full-width mb-3\">\n                                                    <mat-label>{{\"FirstName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"firstName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-2\">\n                                                <mat-form-field class=\"example-full-width mb-2\">\n                                                    <mat-label>{{\"LastName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"lastName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <!--<div class=\"col-1\" *ngIf=\"participants['controls'][i].status == 'VALID' && i===0\">-->\n                                            <div class=\"col-1\" *ngIf=\"participants['controls'][i].status == 'VALID' && i===0 && participants['controls'].length < training.capacity\">\n                                                <div class=\"example-button-row\" >\n                                                    <button mat-mini-fab color=\"primary\" type=\"button\" (click)=\"push()\"><mat-icon class=\"col-white\">add</mat-icon></button>\n                                                </div>\n                                            </div>\n                                            <!--<div class=\"col-1\" *ngIf=\"participants['controls'].length > 1 && (i>0 || participants['controls'][i].status != 'VALID')\">-->\n                                            <div class=\"col-1\" *ngIf=\"participants['controls'].length > 1 && (i>0 || participants['controls'][i].status != 'VALID') || participants['controls'].length >= training.capacity\">\n                                                <div class=\"example-button-row\" >\n                                                    <button mat-mini-fab color=\"warn\" (click)=\"pull(i)\"><mat-icon class=\"col-white\">delete </mat-icon></button>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </ng-container>\n                                </div>\n                            </fieldset>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\">{{\"Save\" | translate}}</button>\n                                            <!--<button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Save\" | translate}}</button>-->\n                                            <button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../../../organisation/training/training.service\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {PartnerTrainingParticipants} from \"../../../core/models/training/partner.training.participants\";\nimport {Person} from \"../../../core/models/security/person\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './submission.participants.component.html',\n    styleUrls: ['./submission.participants.component.scss']\n\n})\n\nexport class SubmissionParticipantsComponent implements OnInit {\n\n    fg: FormGroup;\n    partner: Institution;\n    training: Training;\n    startDate: Date;\n    endDate: Date;\n\n    // title: string;\n    // place: Institution;\n    // parent = new FormControl();\n    // locationAddress = new FormControl();\n    // places: Observable<Institution[]>;\n    // locations: Observable<Location[]>;\n    // placeArray = [];\n    // locationArray = [];\n    // isIdentifierDuplicated = [];\n    // isEmailDuplicated = [];\n    // msg: string;\n\n    constructor(private fb: FormBuilder, private router: Router, private service: TrainingService, private snack: MatSnackBar){\n        const state = this.router.getCurrentNavigation().extras.state;\n        const trainingPartner = state?state.trainingPartner:JSON.parse(localStorage.getItem(\"trainingPartner\"));\n        this.partner = trainingPartner.partner;\n        this.training = trainingPartner.training;\n        this.startDate = new Date(this.training?.startDate);\n        this.endDate = new Date(this.training?.endDate);\n\n        const partnerTrainingParticpants = new PartnerTrainingParticipants(\n            {'partner': this.partner,\n                'training': this.training,\n                'participants': this.fb.array(trainingPartner.participants==null?[this.fb.group(new Person({}))]:trainingPartner.participants.map(p=>this.fb.group(p)))\n            });\n\n        this.fg = this.fb.group(partnerTrainingParticpants);\n\n\n        //\n        // this.title = st?'Edit the current institution':'Create new institution';\n        // let pl = (st && st.place)?st.place: new Institution({});\n        // pl.managers = this.fb.array(pl.managers==null?[this.fb.group(new Person({}))]: pl.managers.map(m=>this.fb.group(m)));\n        // if(pl && pl.parent)\n        //     this.parent.setValue(pl.parent);\n        // if(pl && pl.locationAddress)\n        //     this.locationAddress.setValue(pl.locationAddress);\n        // this.fg = this.fb.group(pl);\n    }\n\n    ngOnInit(){\n        // this.places = this.parent.valueChanges.pipe(startWith(''),\n        //     map(value => {\n        //         if(typeof value==='string' && value.trim().length < 1)\n        //             return [];\n        //         this.service.getPlaces(typeof value==='string'?value.toLowerCase():value.fullname).subscribe((res)=>{\n        //             this.placeArray = res;\n        //         });\n        //         return this.placeArray;\n        //     })\n        // );\n        // this.locations = this.locationAddress.valueChanges.pipe(startWith(''),\n        //     map(value => {\n        //         if(typeof value==='string' && value.trim().length < 1)\n        //             return [];\n        //         this.service.getLocations(typeof value==='string'?value.toLowerCase(): value.fullname).subscribe((res)=>{\n        //             this.locationArray = res;\n        //         });\n        //         return this.locationArray;\n        //     })\n        // );\n    }\n\n    get participants(): FormArray {\n        return this.fg.get('participants') as FormArray;\n    }\n\n    // display(ob): string {\n    //     if(!ob)\n    //         return;\n    //     return ob.fullname?ob.fullname:ob.name;\n    // }\n    //\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(){\n        this.toast('bg-green','The usr has been successfully created');\n        this.back();\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    submit(ob: any): void {\n        ob.participants = this.participants.getRawValue();\n        this.service.participate(ob).subscribe(\n            (res) => this.success(),\n            (err) => this.error(err)\n        );\n    }\n\n    back(){\n        this.router.navigate(['partnership/participants']);\n    }\n\n    push(){\n        this.participants.controls.unshift(this.fb.group(new Person({})));\n    }\n\n    pull(index: number): void {\n        if (this.participants.length > 1)\n            this.participants.removeAt(index);\n    }\n\n\n    //\n    // get managers(): FormArray {\n    //     return this.fg.get('managers') as FormArray;\n    // }\n\n    // private chkIdent(arr, index){\n    //     const ident = arr[index].identifier;\n    //     this.isIdentifierDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].identifier===ident){\n    //             this.isIdentifierDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         } else {\n    //             this.msg = undefined;\n    //         }\n    //     }\n    //     this.service.getPerson(ident).subscribe(res => {\n    //         if(res != null){\n    //             this.pull(index);\n    //             this.managers.controls.unshift(this.fb.group(res));\n    //         }\n    //     });\n    //\n    // }\n\n    // private chkEmail(arr, index){\n    //     const mail = arr[index].email;\n    //     this.isEmailDuplicated = arr.map(e => false);\n    //     for(let i=0; i< arr.length; i++){\n    //         if(i != index && arr[i].email===mail){\n    //             this.isEmailDuplicated[index] = true;\n    //             this.msg = ' (existed in present pool)';\n    //             return;\n    //         } else {\n    //             this.msg = undefined;\n    //         }\n    //     }\n    //     this.service.getPerson(mail).subscribe(res => {\n    //         if(res != null){\n    //             this.pull(index);\n    //             this.managers.controls.unshift(this.fb.group(res));\n    //         }\n    //     });\n    // }\n\n    // check(index){\n    //     const managers = this.managers.getRawValue();\n    //     const email = managers[index].email;\n    //     if(email?.trim().length < 1)\n    //         return;\n    //     if(managers.length > 1){\n    //         for(let i=0; i< managers.length; i++){\n    //             if(index != i){\n    //                 if(email === managers[i].email){\n    //                     this.isEmailDuplicated[index] = true;\n    //                     this.msg = ' (existed in present pool)';\n    //                     return;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     this.service.getPersonByEmail(email).subscribe(res => {\n    //         if(res != null){\n    //             this.managers.controls.unshift(this.fb.group(res));\n    //             this.pull(index+1);\n    //         }\n    //     });\n    // }\n    //\n    // push(){\n    //     this.managers.controls.unshift(this.fb.group(new Person({})));\n    // }\n    //\n\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{partner?partner.name:''}}: {{'training.page' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div style=\"font-weight: bold\">Légende:</div>\n                                    <div>\n                                        Nouvelle: <button mat-icon-button class=\"btn-tbl-edit new\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        En attente: <button mat-icon-button class=\"btn-tbl-edit pending\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        Remplie: <button mat-icon-button class=\"btn-tbl-edit set\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        En cours: <button mat-icon-button class=\"btn-tbl-edit ongoing\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        Complétée: <button mat-icon-button class=\"btn-tbl-edit completed\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        Incomplète: <button mat-icon-button class=\"btn-tbl-edit deprecated\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                    </div>\n                                </div>\n\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <!--<ng-container>-->\n                                        <!--<mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">-->\n                                            <!--<mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"-->\n                                                          <!--[indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">-->\n                                            <!--</mat-checkbox>-->\n                                        <!--</mat-header-cell>-->\n                                        <!--<mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">-->\n                                            <!--<mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"-->\n                                                          <!--[checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">-->\n                                            <!--</mat-checkbox>-->\n                                        <!--</mat-cell>-->\n                                    <!--</ng-container>-->\n\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">\n                                            <span>\n                                                <button mat-icon-button class=\"btn-tbl-edit {{row.status}}\">\n                                                    <mat-icon></mat-icon>\n                                                </button>\n                                            </span>\n                                        </mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"topic\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Theme'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.training.topic.fullname}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"startDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Start Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.training.startDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"endDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'End Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.training.endDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"capacity\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'# Part.'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.participantsQuantity}}/<span style=\"font-weight: bold\">{{row.training.capacity}}</span></mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"categories\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Professionals Category'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">\n                                            <span *ngFor=\"let c of row.training.categories; index as i\">{{i===0?c.name: (i===row.training.categories.length-1? ', et ' + c.name: ', ' + c.name)}}</span>\n\n                                                <!--<span class=\"corps\" *ngFor=\"let category of row.training?.categories; index as i\">-->\n                                            <!---->\n                                                <!--</span>-->\n                                        </mat-cell>\n                                    </ng-container>\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"submitParticipants(row)\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, ElementRef, OnInit, ViewChild} from \"@angular/core\";\nimport {UnsubscribeOnDestroyAdapter} from \"../../../shared/UnsubscribeOnDestroyAdapter\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {TrainingService} from \"../../../organisation/training/training.service\";\nimport {Router} from \"@angular/router\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatSort} from \"@angular/material/sort\";\nimport {MatMenuTrigger} from \"@angular/material/menu\";\nimport {DataSource, SelectionModel} from \"@angular/cdk/collections\";\nimport {BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport {AuthService} from \"../../../core/service/auth.service\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {map} from \"rxjs/operators\";\nimport {TrainingPartner} from \"../../../core/models/training/training.partner\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './participants.training.component.html',\n    styleUrls: ['./participants.training.component.scss']\n})\n\nexport class ParticipantsTrainingComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'status',\n        'topic',\n        'startDate',\n        'endDate',\n        'categories',\n        'capacity'\n    ];\n\n    database: TrainingService | null;\n    datasource: Source | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    partner: Institution;\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: TrainingService, private router: Router, private auth: AuthService){\n        super();\n        this.partner = auth.currentUserValue?.institution;\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new TrainingService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort, this.partner);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n    }\n\n    submitParticipants(row){\n        localStorage.setItem(\"trainingPartner\", JSON.stringify(row));\n        this.router.navigate(['partnership/participants/submission'],{state:{trainingPartner: row}});\n\n        // localStorage.setItem(\"partner\", JSON.stringify(this.partner));\n        // localStorage.setItem(\"training\", JSON.stringify(row.training));\n        // this.router.navigate(['partnership/participants/submission'],{state:{training:row.training, partner: this.partner}});\n    }\n}\n\n\nexport class Source extends DataSource<TrainingPartner> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: TrainingPartner[] = [];\n    renderedData: TrainingPartner[] = [];\n\n    constructor(public service: TrainingService, public paginator: MatPaginator, public ms: MatSort, public partner: Institution){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<TrainingPartner[]>{\n        const displayDataChanges = [\n            this.service.dataPartnerChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n\n        this.service.getTrainingsForAPartner(this.partner?.id);\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.partnerData\n                    .slice()\n                    .filter((tp: TrainingPartner) => {\n                        const search = (\n                            tp.training.topic.title\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: TrainingPartner[]): TrainingPartner[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'title':\n                    [propertyA, propertyB] = [a.training.topic.title, b.training.topic.title];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n}\n"]}