{"version":3,"sources":["webpack:///src/app/organisation/training/broadcast-completion/training.broadcast.completion.component.ts","webpack:///src/app/organisation/training/broadcast-completion/training.broadcast.completion.component.html","webpack:///src/app/organisation/training/broadcast/training.broadcast.component.html","webpack:///src/app/organisation/training/broadcast/training.broadcast.component.ts","webpack:///src/app/organisation/training/page/training.page.component.html","webpack:///src/app/organisation/training/page/training.page.component.ts","webpack:///src/app/organisation/training/training-routing.module.ts","webpack:///src/app/organisation/training/training.module.ts"],"names":["TrainingBroadcastCompletionComponent","router","tn","getCurrentNavigation","extras","state","training","_msg","topic","title","startDate","endDate","e","navigate","go","TrainingBroadcastComponent","fb","service","topicService","placeService","snack","dialog","FormControl","topicArray","location","locationArray","categories","categoryArray","partners","partnerArray","dim","width","height","fg","group","Training","validator","datesValidator","topics","valueChanges","pipe","startWith","map","value","trim","length","getTopics","toLowerCase","name","subscribe","res","locations","getLocations","getCategories","getPlaces","formGroup","start","controls","end","errors","Date","setErrors","t","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","toast","completion","err","console","error","ob","fullname","broadcast","success","dialogRef","TopicFormComponent","data","action","submit","add","initialize","$event","stopPropagation","selection","TrainingPageComponent","http","factory","displayedColumns","SelectionModel","profiles","contextMenuPosition","x","y","database","TrainingService","datasource","Source","paginator","sort","subs","sink","fromEvent","filter","nativeElement","load","navigateByUrl","skipLocationChange","then","managers","display","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","ms","filterChange","BehaviorSubject","filteredData","renderedData","pageIndex","next","displayDataChanges","dataChange","sortChange","page","getTrainings","merge","slice","search","indexOf","sortedData","sortData","startIndex","pageSize","splice","active","direction","a","b","propertyA","propertyB","id","valueA","isNaN","valueB","DataSource","routes","path","component","TrainingRoutingModule","RouterModule","TrainingModule","InstitutionService","TopicService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","NgxMaskModule","MatAutocompleteModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0BaA,qC;AAIT,uDAAoBC,MAApB,EAAkC;AAAA;;;;AAAd,eAAAA,MAAA,GAAAA,MAAA;AAChB,cAAMC,EAAE,GAAG,WAAKD,MAAL,CAAYE,oBAAZ,GAAmCC,MAAnC,CAA0CC,KAA1C,MAA+C,IAA/C,IAA+C,aAA/C,GAA+C,MAA/C,GAA+C,GAAEC,QAA5D;AACA,eAAKC,IAAL,6DAA8D,MAAAL,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAE,MAAF,GAAAA,EAAE,CAAEM,KAAJ,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEC,KAAzE,gCAAmGP,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAE,MAAF,GAAAA,EAAE,CAAEQ,SAAvG,iBAAuHR,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAE,MAAF,GAAAA,EAAE,CAAES,OAA3H;AACH;;;;eAED,eAAO;AACH,mBAAO,KAAKJ,IAAZ;AACH;;;iBAED,oBAAQ,CAAI;;;iBAEZ,YAAGK,CAAH,EAAI;AACA,iBAAKX,MAAL,CAAYY,QAAZ,CAAqB,CAAC,kCAAD,CAArB;AACH;;;;;;;yBAjBQb,qC,EAAoC,oH;AAAA,O;;;cAApCA,qC;AAAoC,iC;AAAA,iB;AAAA,gB;AAAA,6F;AAAA;AAAA;AC1BjD;;AACI;;AAAuB;;AAAO;;AAC9B;;AAAK;;AACL;;AAA+B;;AAC3B;;AAAM;AAAA,qBAAS,IAAAc,EAAA,CAAG,MAAH,CAAT;AAAmB,aAAnB;;AAAqB;;;;AAA+B;;AAAQ;;AAClE;;AAAM;AAAA,qBAAS,IAAAA,EAAA,CAAG,KAAH,CAAT;AAAkB,aAAlB;;AAAoB;;;;AAA+B;;AAAQ;;AACjE;;AAAM;AAAA,qBAAS,IAAAA,EAAA,CAAG,UAAH,CAAT;AAAuB,aAAvB;;AAAyB;;;;AAA0B;;AAC7D;;AACJ;;;;AAP2B;;AAAA;;AAGQ;;AAAA;;AACD;;AAAA;;AACK;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeK;;AAAyD;;AAAc;;;;;;AAA1B;;AAAY;;AAAA;;;;;;AAE7D;;AAA8C;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAgB9C;;AAA4D;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAS5D;;AAA0D;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAC1D;;AAAgE;;;;AAA6D;;;;AAA7D;;AAAA;;;;;;AAU5D;;AAA4D;;AAAU;;;;;;AAAtB;;AAAY;;AAAA;;;;;;AAEhE;;AAAiD;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAS7C;;AAAwD;;AAAU;;;;;;AAAtB;;AAAY;;AAAA;;;;;;AAE5D;;AAAmD;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAOnD;;AAA2D;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AASvD;;AAAuD;;AAAU;;;;;;AAAtB;;AAAY;;AAAA;;;;;;AAE3D;;AAAiD;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAYjD;;AAAuD;;;;AAAwC;;;;AAAxC;;AAAA;;;;;;AAUvD;;AAA2D;;;;AAAwC;;;;AAAxC;;AAAA;;;;UCrFtFC,2B;AAsBT,6CAAoBC,EAApB,EAA6Cf,MAA7C,EAAqEgB,OAArE,EAAuGC,YAAvG,EACoBC,YADpB,EAC8DC,KAD9D,EACyFC,MADzF,EAC0G;AAAA;;AADtF,eAAAL,EAAA,GAAAA,EAAA;AAAyB,eAAAf,MAAA,GAAAA,MAAA;AAAwB,eAAAgB,OAAA,GAAAA,OAAA;AAAkC,eAAAC,YAAA,GAAAA,YAAA;AACnF,eAAAC,YAAA,GAAAA,YAAA;AAA0C,eAAAC,KAAA,GAAAA,KAAA;AAA2B,eAAAC,MAAA,GAAAA,MAAA;AAnBzF,eAAAb,KAAA,GAAQ,IAAI,4CAAAc,WAAJ,EAAR;AACA,eAAAC,UAAA,GAAa,EAAb;AAGA,eAAAC,QAAA,GAAW,IAAI,4CAAAF,WAAJ,EAAX;AACA,eAAAG,aAAA,GAAgB,EAAhB;AAEA,eAAAC,UAAA,GAAa,IAAI,4CAAAJ,WAAJ,EAAb;AACA,eAAAK,aAAA,GAAgB,EAAhB;AAEA,eAAAC,QAAA,GAAW,IAAI,4CAAAN,WAAJ,EAAX;AACA,eAAAO,YAAA,GAAe,EAAf;AAEA,eAAAC,GAAA,GAAM;AACFC,iBAAK,EAAE,QADL;AAEFC,kBAAM,EAAE;AAFN,WAAN;AAOI,eAAKC,EAAL,GAAU,KAAKjB,EAAL,CAAQkB,KAAR,CAAc,IAAI,4DAAAC,QAAJ,CAAa,EAAb,CAAd,EACN;AAACC,qBAAS,EAAE,KAAKC,cAAL,CAAoB,WAApB,EAAiC,SAAjC;AAAZ,WADM,CAAV;AAEH;;;;iBAED,oBAAQ;AAAA;;AACJ,iBAAKC,MAAL,GAAc,KAAK9B,KAAL,CAAW+B,YAAX,CAAwBC,IAAxB,CAA6B,gDAAAC,SAAA,EAAU,EAAV,CAA7B,EACV,sCAAAC,GAAA,EAAI,UAAAC,KAAK,EAAI;AACT,kBAAG,OAAOA,KAAP,KAAe,QAAf,IAA2BA,KAAK,CAACC,IAAN,GAAaC,MAAb,GAAsB,CAApD,EACI,OAAO,EAAP;;AACJ,mBAAI,CAAC5B,OAAL,CAAa6B,SAAb,CAAuB,OAAOH,KAAP,KAAe,QAAf,GAAwBA,KAAK,CAACI,WAAN,EAAxB,GAA4CJ,KAAK,CAACK,IAAzE,EAA+EC,SAA/E,CAAyF,UAACC,GAAD,EAAO;AAC5F,qBAAI,CAAC3B,UAAL,GAAkB2B,GAAlB;AACH,eAFD;;AAGA,qBAAO,KAAI,CAAC3B,UAAZ;AACH,aAPD,CADU,CAAd;AAWA,iBAAK4B,SAAL,GAAiB,KAAK3B,QAAL,CAAce,YAAd,CAA2BC,IAA3B,CAAgC,gDAAAC,SAAA,EAAU,EAAV,CAAhC,EACb,sCAAAC,GAAA,EAAI,UAAAC,KAAK,EAAI;AACT,kBAAG,OAAOA,KAAP,KAAe,QAAf,IAA2BA,KAAK,CAACC,IAAN,GAAaC,MAAb,GAAsB,CAApD,EACI,OAAO,EAAP;;AACJ,mBAAI,CAAC5B,OAAL,CAAamC,YAAb,CAA0B,OAAOT,KAAP,KAAe,QAAf,GAAwBA,KAAK,CAACI,WAAN,EAAxB,GAA4CJ,KAAK,CAACK,IAA5E,EAAkFC,SAAlF,CAA4F,UAACC,GAAD,EAAO;AAC/F,qBAAI,CAACzB,aAAL,GAAqByB,GAArB;AACH,eAFD;;AAGA,qBAAO,KAAI,CAACzB,aAAZ;AACH,aAPD,CADa,CAAjB;AAWA,iBAAKR,OAAL,CAAaoC,aAAb,CAA2B,EAA3B,EAA+BJ,SAA/B,CAAyC,UAACC,GAAD,EAAO;AAC5C,mBAAI,CAACvB,aAAL,GAAqBuB,GAArB;AACH,aAFD;AAIA,iBAAK/B,YAAL,CAAkBmC,SAAlB,CAA4B,EAA5B,EAAgCL,SAAhC,CAA0C,UAACC,GAAD,EAAO;AAC7C,mBAAI,CAACrB,YAAL,GAAoBqB,GAApB;AACH,aAFD;AAGH;;;iBAED,wBAAexC,SAAf,EAAkCC,OAAlC,EAAiD;AAC7C,mBAAO,UAAC4C,SAAD,EAA0B;AAC7B,kBAAMC,KAAK,GAAGD,SAAS,CAACE,QAAV,CAAmB/C,SAAnB,CAAd;AACA,kBAAMgD,GAAG,GAAGH,SAAS,CAACE,QAAV,CAAmB9C,OAAnB,CAAZ;;AACA,kBAAI+C,GAAG,CAACC,MAAJ,IAAc,CAACD,GAAG,CAACC,MAAJ,CAAWtB,cAA9B,EAA8C;AAC1C;AACH;;AACD,kBAAI,IAAIuB,IAAJ,CAASJ,KAAK,CAACb,KAAf,IAAwB,IAAIiB,IAAJ,CAASF,GAAG,CAACf,KAAb,CAA5B,EAAiD;AAC7Ce,mBAAG,CAACG,SAAJ,CAAc;AAAExB,gCAAc,EAAE;AAAlB,iBAAd;AACH,eAFD,MAEO;AACHqB,mBAAG,CAACG,SAAJ,CAAc,IAAd;AACH;AACJ,aAXD;AAYH,W,CAED;AACA;AACA;AACA;AACA;;;;iBAEA,oBAAWC,CAAX,EAAY;AACR;AACA,iBAAK7D,MAAL,CAAYY,QAAZ,CAAqB,CAAC,6BAAD,CAArB;AACH;;;iBAED,sBAAU,CAAI;;;iBAEN,eAAMkD,KAAN,EAAaC,IAAb,EAAmB;AACvB,iBAAK5C,KAAL,CAAW6C,IAAX,CAAgBD,IAAhB,EAAsB,EAAtB,EAA0B;AACtBE,sBAAQ,EAAE,IADY;AACNC,8BAAgB,EAAE,KADZ;AACmBC,gCAAkB,EAAE,OADvC;AACgDC,wBAAU,EAAEN;AAD5D,aAA1B;AAGH;;;iBAEO,iBAAQD,CAAR,EAAS;AACb,iBAAKQ,KAAL,CAAW,UAAX,EAAsB,wCAAtB;AACA,iBAAKC,UAAL,CAAgBT,CAAhB;AACH;;;iBAEO,eAAMU,GAAN,EAA4B;AAChC,iBAAKF,KAAL,CAAW,QAAX,EAAoB,uEAApB;AACAG,mBAAO,CAACC,KAAR,CAAcF,GAAd;AACH;;;iBAED,iBAAQG,EAAR,EAAU;AACN,gBAAG,CAACA,EAAJ,EACI;AACJ,mBAAOA,EAAE,CAACC,QAAH,GAAYD,EAAE,CAACC,QAAf,GAAyBD,EAAE,CAAC3B,IAAH,GAAQ2B,EAAE,CAAC3B,IAAX,GAAgB2B,EAAE,CAAClE,KAAnD;AACH;;;iBAED,gBAAOkE,EAAP,EAAc;AAAA;;AACVA,cAAE,CAACnE,KAAH,GAAW,KAAKA,KAAL,CAAWmC,KAAtB;AACAgC,cAAE,CAACnD,QAAH,GAAc,KAAKA,QAAL,CAAcmB,KAA5B;AACAgC,cAAE,CAACjD,UAAH,GAAgB,KAAKA,UAAL,CAAgBiB,KAAhC;AACAgC,cAAE,CAAC/C,QAAH,GAAc,KAAKA,QAAL,CAAce,KAA5B;AAEA,iBAAK1B,OAAL,CAAa4D,SAAb,CAAuBF,EAAvB,EAA2B1B,SAA3B,CACI,UAACC,GAAD;AAAA,qBAAS,MAAI,CAAC4B,OAAL,CAAa5B,GAAb,CAAT;AAAA,aADJ,EAEI,UAACsB,GAAD;AAAA,qBAAS,MAAI,CAACE,KAAL,CAAWF,GAAX,CAAT;AAAA,aAFJ;AAIH;;;iBAED,kBAAM,CACF;AACH;;;iBAED,eAAG;AACC,gBAAMO,SAAS,GAAG,KAAK1D,MAAL,CAAY4C,IAAZ,CAAiB,4EAAAe,kBAAjB,EAAqC,MAAF,OAAE,CAAF,kBAC9C,KAAKlD,GADyC,CAAE,EACxC;AACXmD,kBAAI,EAAE;AACFzE,qBAAK,EAAE,KAAKA,KADV;AAEF0E,sBAAM,EAAE;AAFN;AADK,aADwC,CAArC,CAAlB;AAOH;;;;;;;yBAtIQnE,2B,EAA0B,wH,EAAA,oH,EAAA,+H,EAAA,6I,EAAA,+J,EAAA,sI,EAAA,iI;AAAA,O;;;cAA1BA,2B;AAA0B,iC;AAAA,kB;AAAA,gB;AAAA,66C;AAAA;AAAA;AD3BvC;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAuB;;;;AAAiD;;AACxE;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AAAuB;AAAA,qBAAU,IAAAoE,MAAA,cAAV;AAA0B,aAA1B;;AACnB;;AACI;;AACI;;AACI;;AAAW;;;;AAAuB;;AAClC;;AACA;;AACI;;;;AACJ;;AACA;;AACJ;;AACJ;;AACA;;AAAuC;AAAA,qBAAS,IAAAC,GAAA,EAAT;AAAc,aAAd;;AACnC;;AACI;;AAA4B;;AAAG;;AACnC;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAW;;;;AAA4B;;AACvC;;AACA;;AACA;;AACA;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAW;;;;AAA0B;;AACrC;;AACA;;AACA;;AACA;;AACA;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAW;;;;AAA0B;;AACrC;;AAEA;;AACI;;;;AACJ;;AACA;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAW;;;;AAAuC;;AAClD;;AACI;;AACJ;;AACA;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAW;;;;AAAqC;;AAChD;;AACA;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAW;;;;AAA0B;;AACrC;;AACI;;AACJ;;AACA;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAW;;;;AAAmC;;AAC9C;;AACI;;AAAqC;;AAAa;;AAClD;;AAAqC;;AAAQ;;AACjD;;AACA;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAW;;;;AAA2B;;AACtC;;AACI;;AAAuC;;AAAe;;AACtD;;AAA+C;;AAAiB;;AACpE;;AACA;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AAAiF;;;;AAAsB;;AACvG;;AAAuC;AAAA,qBAAS,IAAAC,UAAA,EAAT;AAAqB,aAArB;;AAAqC;;;;AAA8B;;AAC9G;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;;;;;;;AA/H2C;;AAAA;;AASb;;AAAA;;AAIqB;;AAAA;;AACiB;;AAAA,+FAAqB,iBAArB,EAAqB,GAArB;;AACyC;;AAAA;;AACvC;;AAAA;;AAElB;;AAAA;;AAYD;;AAAA;;AACiC;;AAAA;;AACX;;AAAA;;AAErB;;AAAA;;AAKD;;AAAA;;AAC+B;;AAAA;;AACT;;AAAA;;AAErB;;AAAA;;AACA;;AAAA;;AAMD;;AAAA;;AACiB;;AAAA,kGAAwB,iBAAxB,EAAwB,GAAxB;;AAE4C;;AAAA;;AAC1C;;AAAA;;AAElB;;AAAA;;AAOD;;AAAA;;AACU;;AAAA;;AACS;;AAAA;;AAElB;;AAAA;;AAKD;;AAAA;;AAEC;;AAAA;;AAOD;;AAAA;;AACU;;AAAA;;AACS;;AAAA;;AAElB;;AAAA;;AAOD;;AAAA;;AAEK;;AAAA;;AACA;;AAAA;;AAEJ;;AAAA;;AAKD;;AAAA;;AAEK;;AAAA;;AACA;;AAAA;;AAEJ;;AAAA;;AAQkC;;AAAA,yFAAe,UAAf,EAAe,aAAf;;AAAuC;;AAAA;;AACL;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE3FhF;;AACI;;AAAc;AAAA;;AAAA;;AAAA,qDAAoC,IAApC;AAAwC,WAAxC;;AAEd;;AACJ;;;;;;AAJmC;;AACyB;;AAAA,qIAAmD,eAAnD,EAAmD,sDAAnD,EAAmD,SAAnD,EAAmD,cAAnD;;;;;;;;AAI5D;;AACI;;AAAc;AAAA,mBAASC,MAAM,CAACC,eAAP,EAAT;AAAiC,WAAjC,EAAkC,QAAlC,EAAkC;AAAA;;AAAA;;AAAA;;AAAA,4BAAoB,QAAAC,SAAA,gBAApB,GAA4C,IAA5C;AAAgD,WAAlF;;AAEd;;AACJ;;;;;;;;AAJgC;;AAEd;;AAAA,oHAAqC,SAArC,EAAqC,cAArC;;;;;;AAMlB;;AAAmD;;;;AAAsB;;;;AAAtB;;AAAA;;;;;;AACnD;;AAAgC;;AAAsB;;;;;;AAAtB;;AAAA;;;;;;AAGhC;;AAAmD;;;;AAA2B;;;;AAA3B;;AAAA;;;;;;AACnD;;AAAgC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAGhC;;AAAmD;;;;AAAyB;;;;AAAzB;;AAAA;;;;;;AACnD;;AAAgC;;AAAe;;;;;;AAAf;;AAAA;;;;;;AAGhC;;AAAmD;;;;AAAoC;;;;AAApC;;AAAA;;;;;;AACnD;;AAAgC;;AAAgB;;;;;;AAAhB;;AAAA;;;;;;AAGhC;;AAAmD;;;;AAAmC;;;;AAAnC;;AAAA;;;;;;AACnD;;AAAgC;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;AAGhC;;AAAmD;;;;AAAkC;;;;AAAlC;;AAAA;;;;;;AACnD;;AAAgC;;AAAqB;;;;;;AAArB;;AAAA;;;;;;AAgCpC;;;;;;AACA;;;;AAA0D;;;;;;;;UC3EjFC,sB;;;;;AAwBT,wCAAmBC,IAAnB,EAA4CrE,MAA5C,EAAuED,KAAvE,EAAmGuE,OAAnG,EAAqI1F,MAArI,EAAmJ;AAAA;;AAAA;;AAC/I;AADe,iBAAAyF,IAAA,GAAAA,IAAA;AAAyB,iBAAArE,MAAA,GAAAA,MAAA;AAA2B,iBAAAD,KAAA,GAAAA,KAAA;AAA4B,iBAAAuE,OAAA,GAAAA,OAAA;AAAkC,iBAAA1F,MAAA,GAAAA,MAAA;AAtBrI,iBAAA2F,gBAAA,GAAmB,CACf,OADe,EAEf,WAFe,EAGf,SAHe,EAIf,UAJe,EAKf,SALe,EAMf,UANe,CAOf;AACA;AACA;AATe,WAAnB;AAcA,iBAAAJ,SAAA,GAAY,IAAI,sDAAAK,cAAJ,CAA6B,IAA7B,EAAmC,EAAnC,CAAZ;AAEA,iBAAAC,QAAA,GAAS,EAAT;AACA,iBAAAhE,GAAA,GAAM;AACFC,iBAAK,EAAE,QADL;AAEFC,kBAAM,EAAE;AAFN,WAAN;AAcA,iBAAA+D,mBAAA,GAAsB;AAAEC,aAAC,EAAE,KAAL;AAAYC,aAAC,EAAE;AAAf,WAAtB;AATmJ;AAElJ;;;;iBASM,gBAAO;AAAA;;AACV,iBAAKC,QAAL,GAAgB,IAAI,+CAAAC,eAAJ,CAAoB,KAAKT,IAAzB,CAAhB;AACA,iBAAKU,UAAL,GAAkB,IAAIC,OAAJ,CAAW,KAAKH,QAAhB,EAA0B,KAAKI,SAA/B,EAA0C,KAAKC,IAA/C,CAAlB;AACA,iBAAKC,IAAL,CAAUC,IAAV,GAAiB,sCAAAC,SAAA,EAAU,KAAKC,MAAL,CAAYC,aAAtB,EAAqC,OAArC,EAA8C3D,SAA9C,CACb,YAAM;AACF,kBAAI,CAAC,MAAI,CAACmD,UAAV,EAAsB;AAClB;AACH;;AACD,oBAAI,CAACA,UAAL,CAAgBO,MAAhB,GAAyB,MAAI,CAACA,MAAL,CAAYC,aAAZ,CAA0BjE,KAAnD;AACH,aANY,CAAjB;AAQH;;;iBAED,oBAAW;AACP,iBAAKkE,IAAL;AACH;;;iBAEO,eAAM9C,KAAN,EAAaC,IAAb,EAAmB;AACvB,iBAAK5C,KAAL,CAAW6C,IAAX,CAAgBD,IAAhB,EAAsB,EAAtB,EAA0B;AACtBE,sBAAQ,EAAE,IADY;AACNC,8BAAgB,EAAE,KADZ;AACmBC,gCAAkB,EAAE,OADvC;AACgDC,wBAAU,EAAEN;AAD5D,aAA1B;AAGH;;;iBAED,mBAAO;AAAA;;AACH,iBAAK9D,MAAL,CAAY6G,aAAZ,CAA0B,mBAA1B,EAA+C;AAAEC,gCAAkB,EAAE;AAAtB,aAA/C,EAA6EC,IAA7E,CAAkF,YAAM;AACpF,oBAAI,CAAC/G,MAAL,CAAYY,QAAZ,CAAqB,CAAC,6BAAD,CAArB;AACH,aAFD;AAGA,iBAAKyD,KAAL,CAAW,UAAX,EAAsB,2CAAtB;AACH;;;iBAEO,eAAME,GAAN,EAA2B;AAC/B,iBAAKF,KAAL,CAAW,QAAX,EAAoB,2EAApB;AACAG,mBAAO,CAACC,KAAR,CAAcF,GAAd;AACH,W,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBAEA,yBAAgByC,QAAhB,EAA0B;AACtB,gBAAIC,OAAO,GAAG,EAAd;;AACA,gBAAID,QAAQ,CAACpE,MAAT,GAAkB,CAAtB,EAAyB;AACrB,kBAAIoE,QAAQ,CAACpE,MAAT,IAAmB,CAAvB,EAA0B;AACtBqE,uBAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYrC,QAAtB;AACH,eAFD,MAEO,IAAIqC,QAAQ,CAACpE,MAAT,IAAmB,CAAvB,EAAyB;AAC5BqE,uBAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYrC,QAAZ,GAAuB,KAAvB,GAA+BqC,QAAQ,CAAC,CAAD,CAAR,CAAYrC,QAArD;AACH,eAFM,MAEA;AACHsC,uBAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYrC,QAAZ,GAAuB,KAAvB,IAAiCqC,QAAQ,CAACpE,MAAT,GAAgB,CAAjD,IAAsD,SAAhE;AACH;AACJ;;AACD,mBAAOqE,OAAP;AACH;;;;QAvGsC,iEAAAC,2B;;;yBAA9B1B,sB,EAAqB,6H,EAAA,gI,EAAA,qI,EAAA,+H,EAAA,oH;AAAA,O;;;cAArBA,sB;AAAqB,iC;AAAA;AAAA;sEA4BnB,yDAAA2B,Y,EAAc,C;;sEACd,qDAAAC,O,EAAS,C;;;;sEAET,qDAAAC,c,EAAc,C;;;;;;;;;;;;;;;;;;ADrD7B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAqB;;AAAI;;AAAQ;;;;AAA+B;;AAAS;;AAAK;;AAC9E;;AACI;;AAAO;;AAAsC;;AAAM;;AAAI;;AACvD;;AACJ;;AACJ;;AACA;;AAOJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAKA;;AAKJ;;AAEA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AACA;;AACJ;;AA+BA;;AACA;;AACJ;;AACA;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AA/FiF;;AAAA;;AAgB/B;;AAAA;;AAoEG;;AAAA;;AACa;;AAAA;;AAER;;AAAA,mHAAyC,WAAzC,EAAyC,CAAzC,EAAyC,UAAzC,EAAyC,EAAzC,EAAyC,iBAAzC,EAAyC,sEAAzC;;;;;;;;UC8B7CjB,O;;;;;AAeT,yBAAmBpF,OAAnB,EAAoDqF,SAApD,EAAoFiB,EAApF,EAA+F;AAAA;;AAAA;;AAC3F;AADe,iBAAAtG,OAAA,GAAAA,OAAA;AAAiC,iBAAAqF,SAAA,GAAAA,SAAA;AAAgC,iBAAAiB,EAAA,GAAAA,EAAA;AAbpF,iBAAAC,YAAA,GAAe,IAAI,mCAAAC,eAAJ,CAAoB,EAApB,CAAf;AAUA,iBAAAC,YAAA,GAA2B,EAA3B;AACA,iBAAAC,YAAA,GAA2B,EAA3B;;AAII,iBAAKH,YAAL,CAAkBvE,SAAlB,CAA4B;AAAA,mBAAO,OAAKqD,SAAL,CAAesB,SAAf,GAA2B,CAAlC;AAAA,WAA5B;;AAF2F;AAG9F;;;;eAdD,eAAU;AACN,mBAAO,KAAKJ,YAAL,CAAkB7E,KAAzB;AACH,W;eAED,aAAWgE,MAAX,EAA2B;AACvB,iBAAKa,YAAL,CAAkBK,IAAlB,CAAuBlB,MAAvB;AACH;;;iBAUD,mBAAO;AAAA;;AACH,gBAAMmB,kBAAkB,GAAG,CACvB,KAAK7G,OAAL,CAAa8G,UADU,EAEvB,KAAKR,EAAL,CAAQS,UAFe,EAGvB,KAAKR,YAHkB,EAIvB,KAAKlB,SAAL,CAAe2B,IAJQ,CAA3B;AAMA,iBAAKhH,OAAL,CAAaiH,YAAb;AACA,mBAAO,uCAAAC,KAAA,gBAASL,kBAAT,EAA6BtF,IAA7B,CACH,iDAAAE,GAAA,EAAI,YAAM;AACN,oBAAI,CAACgF,YAAL,GAAoB,MAAI,CAACzG,OAAL,CAAagE,IAAb,CACfmD,KADe,GAEfzB,MAFe,CAER,UAACrG,QAAD,EAAwB;AAC5B,oBAAM+H,MAAM,GACR/H,QAAQ,CAACE,KAAT,CAAeC,KADJ,CAEbsC,WAFa,EAAf;AAGA,uBAAOsF,MAAM,CAACC,OAAP,CAAe,MAAI,CAAC3B,MAAL,CAAY5D,WAAZ,EAAf,MAA8C,CAAC,CAAtD;AACH,eAPe,CAApB;;AAQA,kBAAMwF,UAAU,GAAG,MAAI,CAACC,QAAL,CAAc,MAAI,CAACd,YAAL,CAAkBU,KAAlB,EAAd,CAAnB;;AACA,kBAAMK,UAAU,GAAG,MAAI,CAACnC,SAAL,CAAesB,SAAf,GAA2B,MAAI,CAACtB,SAAL,CAAeoC,QAA7D;AACA,oBAAI,CAACf,YAAL,GAAoBY,UAAU,CAACI,MAAX,CAAkBF,UAAlB,EAA8B,MAAI,CAACnC,SAAL,CAAeoC,QAA7C,CAApB;AACA,qBAAO,MAAI,CAACf,YAAZ;AACH,aAbD,CADG,CAAP;AAgBH;;;iBAED,sBAAa,CAAE;;;iBAEf,kBAAS1C,IAAT,EAAyB;AAAA;;AACrB,gBAAI,CAAC,KAAKsC,EAAL,CAAQqB,MAAT,IAAmB,KAAKrB,EAAL,CAAQsB,SAAR,KAAsB,EAA7C,EAAiD;AAC7C,qBAAO5D,IAAP;AACH;;AACD,mBAAOA,IAAI,CAACsB,IAAL,CAAU,UAACuC,CAAD,EAAIC,CAAJ,EAAU;AACvB,kBAAIC,SAAS,GAAoB,EAAjC;AACA,kBAAIC,SAAS,GAAoB,EAAjC;;AACA,sBAAQ,MAAI,CAAC1B,EAAL,CAAQqB,MAAhB;AACI,qBAAK,IAAL;AAAA,6BAC6B,CAACE,CAAC,CAACI,EAAH,EAAOH,CAAC,CAACG,EAAT,CAD7B;AACKF,2BADL;AACgBC,2BADhB;AAEI;;AACJ,qBAAK,MAAL;AAAA,8BAC6B,CAACH,CAAC,CAACtI,KAAF,CAAQC,KAAT,EAAgBsI,CAAC,CAACvI,KAAF,CAAQC,KAAxB,CAD7B;AACKuI,2BADL;AACgBC,2BADhB;AAEI;AANR;;AASA,kBAAME,MAAM,GAAGC,KAAK,CAAC,CAACJ,SAAF,CAAL,GAAoBA,SAApB,GAAgC,CAACA,SAAhD;AACA,kBAAMK,MAAM,GAAGD,KAAK,CAAC,CAACH,SAAF,CAAL,GAAoBA,SAApB,GAAgC,CAACA,SAAhD;AACA,qBACI,CAACE,MAAM,GAAGE,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAxB,KAA8B,MAAI,CAAC9B,EAAL,CAAQsB,SAAR,KAAsB,KAAtB,GAA8B,CAA9B,GAAkC,CAAC,CAAjE,CADJ;AAGH,aAjBM,CAAP;AAkBH;;;;QAtEuB,sDAAAS,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1H5B,UAAMC,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,WADV;AAEIC,iBAAS,EAAE,qEAAA1I;AAFf,OADmB,EAKnB;AACIyI,YAAI,EAAE,MADV;AAEIC,iBAAS,EAAE,2DAAAhE;AAFf,OALmB,EASnB;AACI+D,YAAI,EAAE,sBADV;AAEIC,iBAAS,EAAE,2FAAAzJ;AAFf,OATmB,CAAvB;;UAmBa0J,sB;;;;;yBAAAA,sB;AAAqB,O;;;cAArBA;;;kBAHA,CAAC,6CAAAC,YAAA,UAAsBJ,MAAtB,CAAD,C,EACC,6CAAAI,Y;;;;4HAEDD,sB,EAAqB;AAAA;AAAA,oBAFpB,6CAAAC,YAEoB;AAAA,S;AAFR,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC4CbC,e;;;;;yBAAAA,e;AAAc,O;;;cAAdA;;;mBAHE,CAAC,+CAAAzD,eAAD,EAAkB,4EAAA0D,kBAAlB,EAAsC,gEAAAC,YAAtC,C;AAAmD,kBA3BrD,CACL,6CAAAC,YADK,EAEL,4CAAAC,WAFK,EAGL,4CAAAC,mBAHK,EAIL,sDAAAC,cAJK,EAKL,0DAAAC,kBALK,EAML,2DAAAC,kBANK,EAOL,sDAAAC,cAPK,EAQL,0DAAAC,iBARK,EASL,uDAAAC,eATK,EAUL,qDAAAC,aAVK,EAWL,uDAAAC,eAXK,EAYL,qDAAAC,aAZK,EAaL,wDAAAC,gBAbK,EAcL,uDAAAC,eAdK,EAeL,2DAAAC,mBAfK,EAgBL,yDAAAC,iBAhBK,EAiBL,qDAAAC,aAjBK,EAkBL,sDAAAC,uBAlBK,EAmBL,qDAAAC,aAnBK,EAoBL,iEAAAC,wBApBK,EAqBL,kDAAAC,eArBK,EAsBL,sDAAAzB,qBAtBK,EAuBL,sDAAA0B,kBAvBK,EAwBL,uCAAAC,aAxBK,EAyBL,6DAAAC,qBAzBK,CA2BqD;;;;4HAGrD1B,e,EAAc;AAAA,yBAlCnB,qEAAA7I,0BAkCmB,EAjCnB,2FAAAf,oCAiCmB,EAhCnB,2DAAAyF,qBAgCmB;AAhCE,oBAGrB,6CAAAsE,YAHqB,EAIrB,4CAAAC,WAJqB,EAKrB,4CAAAC,mBALqB,EAMrB,sDAAAC,cANqB,EAOrB,0DAAAC,kBAPqB,EAQrB,2DAAAC,kBARqB,EASrB,sDAAAC,cATqB,EAUrB,0DAAAC,iBAVqB,EAWrB,uDAAAC,eAXqB,EAYrB,qDAAAC,aAZqB,EAarB,uDAAAC,eAbqB,EAcrB,qDAAAC,aAdqB,EAerB,wDAAAC,gBAfqB,EAgBrB,uDAAAC,eAhBqB,EAiBrB,2DAAAC,mBAjBqB,EAkBrB,yDAAAC,iBAlBqB,EAmBrB,qDAAAC,aAnBqB,EAoBrB,sDAAAC,uBApBqB,EAqBrB,qDAAAC,aArBqB,EAsBrB,iEAAAC,wBAtBqB,EAuBrB,kDAAAC,eAvBqB,EAwBrB,sDAAAzB,qBAxBqB,EAyBrB,sDAAA0B,kBAzBqB,EA0BrB,uCAAAC,aA1BqB,EA2BrB,6DAAAC,qBA3BqB;AAgCF,S;AALE,O","file":"src_app_organisation_training_training_module_ts-es5.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup, Validators\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../training.service\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {InstitutionService} from \"../../../configuration/institution/institution.service\";\nimport {Person} from \"../../../core/models/security/person\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './training.broadcast.completion.component.html',\n    styleUrls: ['./training.broadcast.completion.component.scss']\n\n})\n\nexport class TrainingBroadcastCompletionComponent implements OnInit {\n\n    private _msg: string;\n\n    constructor(private router: Router){\n        const tn = this.router.getCurrentNavigation().extras.state?.training;\n        this._msg = `You have successfully broadcast the training: \"${tn?.topic?.title}\", scheduled from ${tn?.startDate} to ${tn?.endDate}`;\n    }\n\n    get msg(): string {\n        return this._msg;\n    }\n\n    ngOnInit(){}\n\n    go(e){\n        this.router.navigate(['/organisation/training/broadcast']);\n    }\n}","<section class=\"content\">\n    <div class=\"broadcast\">{{msg}}</div>\n    <br/><br/>\n    <div style=\"text-align:center\">Go to:\n        <span (click)=\"go('list')\">{{'Training List' | translate}}</span> |\n        <span (click)=\"go('new')\">{{'New Broadcast' | translate}}</span> |\n        <span (click)=\"go('planning')\">{{'Planning' | translate}}</span>\n    </div>\n</section>\n\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{'training.organisation.broadcast' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-11\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Title' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"topic\" [matAutocomplete]=\"autoTopic\" required>\n                                        <mat-autocomplete autoActiveFirstOption #autoTopic=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let t of topics | async\" [value]=\"t\">{{t.fullname}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"topic.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-1 add-button-training\" (click)=\"add()\">\n                                    <button mat-mini-fab color=\"primary\" type=\"button\">\n                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-2\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Start Date' | translate}}</mat-label>\n                                        <input matInput formControlName=\"startDate\" [matDatepicker]=\"start\" required>\n                                        <mat-datepicker-toggle matSuffix [for]=\"start\"></mat-datepicker-toggle>\n                                        <mat-datepicker #start></mat-datepicker>\n                                        <mat-error *ngIf=\"fg.get('startDate').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-2\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'End Date' | translate}}</mat-label>\n                                        <input matInput formControlName=\"endDate\" [matDatepicker]=\"end\" required>\n                                        <mat-datepicker-toggle matSuffix [for]=\"end\"></mat-datepicker-toggle>\n                                        <mat-datepicker #end></mat-datepicker>\n                                        <mat-error *ngIf=\"fg.get('endDate').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                        <mat-error *ngIf=\"fg.get('endDate').hasError('datesValidator')\">{{'End Date needs to be greater than first date'| translate}}</mat-error>\n\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-8\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Where to' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"location\" [matAutocomplete]=\"autoLocation\" required>\n                                        <!--<input type=\"text\" matInput [formControl]=\"location\" [matAutocomplete]=\"autoLocation\" (blur)=\"updatePartners();\" required>-->\n                                        <mat-autocomplete autoActiveFirstOption #autoLocation=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let l of locations | async\" [value]=\"l\">{{l.name}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"location.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-9\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Participants Category' | translate}}</mat-label>\n                                        <mat-select multiple [formControl]=\"categories\" required>\n                                            <mat-option *ngFor=\"let c of categoryArray\" [value]=\"c\">{{c.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"categories.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Number of attendees' | translate}}</mat-label>\n                                        <input matInput formControlName=\"capacity\" required>\n                                        <mat-error *ngIf=\"fg.get('capacity').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Partners' | translate}}</mat-label>\n                                        <mat-select multiple [formControl]=\"partners\" required=\"\">\n                                            <mat-option *ngFor=\"let p of partnerArray\" [value]=\"p\">{{p.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"partners.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Mode Transmission' | translate}}</mat-label>\n                                        <mat-select formControlName=\"mode\" required>\n                                            <mat-option [value]=\"'MODE_ON_SITE'\">En présentiel</mat-option>\n                                            <mat-option [value]=\"'MODE_ON_LINE'\">En ligne</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('mode').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Test Type' | translate}}</mat-label>\n                                        <mat-select formControlName=\"testType\" required>\n                                            <mat-option [value]=\"'TEST_TYPE_AUTO'\">Auto Évaluation</mat-option>\n                                            <mat-option [value]=\"'TEST_TYPE_PRE_AND_POST'\">Pré et Post Tests</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('testType').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Save\" | translate}}</button>\n                                            <button mat-raised-button color=\"warn\" (click)=\"initialize()\" tabindex=\"-1\">{{\"Reinitialize\" | translate}}</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup, Validators\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../training.service\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {InstitutionService} from \"../../../configuration/institution/institution.service\";\nimport {TopicService} from \"../../../configuration/topic/topic.service\";\nimport {TopicFormComponent} from \"../../../configuration/topic/form/topic.form.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './training.broadcast.component.html',\n    styleUrls: ['./training.broadcast.component.scss']\n})\n\nexport class TrainingBroadcastComponent implements OnInit {\n\n    fg: FormGroup;\n    topics: Observable<Topic[]>;\n    topic = new FormControl();\n    topicArray = [];\n\n    locations: Observable<Institution[]>;\n    location = new FormControl();\n    locationArray = [];\n\n    categories = new FormControl();\n    categoryArray = [];\n\n    partners = new FormControl();\n    partnerArray = [];\n\n    dim = {\n        width: '1000px',\n        height: '380px'\n    };\n\n    constructor(private fb: FormBuilder, private router: Router, private service: TrainingService, private topicService: TopicService,\n                private placeService: InstitutionService, private snack: MatSnackBar, public dialog: MatDialog){\n        this.fg = this.fb.group(new Training({}),\n            {validator: this.datesValidator('startDate', 'endDate')});\n    }\n\n    ngOnInit(){\n        this.topics = this.topic.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getTopics(typeof value==='string'?value.toLowerCase():value.name).subscribe((res)=>{\n                    this.topicArray = res;\n                });\n                return this.topicArray;\n            })\n        );\n\n        this.locations = this.location.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getLocations(typeof value==='string'?value.toLowerCase():value.name).subscribe((res)=>{\n                    this.locationArray = res;\n                });\n                return this.locationArray;\n            })\n        );\n\n        this.service.getCategories('').subscribe((res)=>{\n            this.categoryArray = res;\n        });\n\n        this.placeService.getPlaces('').subscribe((res)=>{\n            this.partnerArray = res;\n        });\n    }\n\n    datesValidator(startDate: string, endDate: string){\n        return (formGroup: FormGroup) => {\n            const start = formGroup.controls[startDate];\n            const end = formGroup.controls[endDate];\n            if (end.errors && !end.errors.datesValidator) {\n                return;\n            }\n            if (new Date(start.value) > new Date(end.value)) {\n                end.setErrors({ datesValidator: true });\n            } else {\n                end.setErrors(null);\n            }\n        }\n    }\n\n    // updatePartners(){\n    //     if(this.partnerArray.length > 0 && typeof this.location.value !='string'){\n    //         this.partnerArray = this.partnerArray.filter(p => p.id != this.location.value?.id);\n    //     }\n    // }\n\n    completion(t){\n        // this.router.navigate(['/organisation/training/broadcast-completion'], {state: {training: t}});\n        this.router.navigate(['/organisation/training/page']);\n    }\n\n    initialize(){}\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(t){\n        this.toast('bg-green','The user has been successfully created');\n        this.completion(t);\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    display(ob): string {\n        if(!ob)\n            return;\n        return ob.fullname?ob.fullname:(ob.name?ob.name:ob.title);\n    }\n\n    submit(ob: any): void {\n        ob.topic = this.topic.value;\n        ob.location = this.location.value;\n        ob.categories = this.categories.value;\n        ob.partners = this.partners.value;\n\n        this.service.broadcast(ob).subscribe(\n            (res) => this.success(res),\n            (err) => this.error(err)\n        );\n    }\n\n    cancel(): void {\n        // this.fm.close();\n    }\n\n    add(){\n        const dialogRef = this.dialog.open(TopicFormComponent, {\n            ...this.dim,\n            data: {\n                topic: this.topic,\n                action: 'add',\n            }\n        });\n    }\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{'training.page' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                            <ul class=\"header-buttons\">\n                                                <!--<li>-->\n                                                    <!--<button mat-mini-fab color=\"primary\" (click)=\"add()\">-->\n                                                        <!--<mat-icon class=\"col-white\">add</mat-icon>-->\n                                                    <!--</button>-->\n                                                <!--</li>-->\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <ng-container>\n                                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                                                          [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"topic\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Theme'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.topic.fullname}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"startDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Start Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.startDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"endDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'End Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.endDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"capacity\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Number of attendees'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.capacity}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"network\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Number of networks'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.partners.length}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"location\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Training Location'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.location.name}}</mat-cell>\n                                    </ng-container>\n\n\n\n\n                                    <!--<ng-container matColumnDef=\"address\">-->\n                                        <!--<mat-header-cell *matHeaderCellDef mat-sort-header>{{'Adress'| translate}}</mat-header-cell>-->\n                                        <!--<mat-cell *matCellDef=\"let row\">{{row.address}}</mat-cell>-->\n                                    <!--</ng-container>-->\n                                    <!--<ng-container matColumnDef=\"managers\">-->\n                                        <!--<mat-header-cell *matHeaderCellDef mat-sort-header>{{'Manager'| translate}}</mat-header-cell>-->\n                                        <!--<mat-cell *matCellDef=\"let row\">{{displayManagers(row.managers)}}</mat-cell>-->\n                                    <!--</ng-container>-->\n                                    <!--<ng-container matColumnDef=\"parent\">-->\n                                    <!--<mat-header-cell *matHeaderCellDef mat-sort-header>{{'Parent'| translate}}</mat-header-cell>-->\n                                    <!--<mat-cell *matCellDef=\"let row\">{{row?.parent?.name}}</mat-cell>-->\n                                    <!--</ng-container>-->\n                                    <!--<ng-container matColumnDef=\"actions\">-->\n                                        <!--<mat-header-cell *matHeaderCellDef mat-sort-header>{{'Action'| translate}}</mat-header-cell>-->\n                                        <!--<mat-cell *matCellDef=\"let row\">-->\n                                            <!--<span>-->\n                                                <!--<button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)=\"edit(row)\">-->\n                                                    <!--<mat-icon aria-label=\"Edit\" class=\"col-white\">edit</mat-icon>-->\n                                                <!--</button>-->\n                                                <!--<button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)=\"delete(row)\">-->\n                                                    <!--<mat-icon aria-label=\"Delete\" class=\"col-white\">delete</mat-icon>-->\n                                                <!--</button>-->\n                                            <!--</span>-->\n                                        <!--</mat-cell>-->\n                                    <!--</ng-container>-->\n\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, ElementRef, OnInit, ViewChild} from \"@angular/core\";\nimport {UnsubscribeOnDestroyAdapter} from \"../../../shared/UnsubscribeOnDestroyAdapter\";\nimport {DataSource} from \"@angular/cdk/table\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatSort} from \"@angular/material/sort\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\nimport {MatMenuTrigger} from \"@angular/material/menu\";\nimport {BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Training} from \"../../../core/models/training/training\";\nimport {TrainingService} from \"../training.service\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './training.page.component.html',\n    styleUrls: ['./training.page.component.scss']\n})\n\nexport class TrainingPageComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'topic',\n        'startDate',\n        'endDate',\n        'capacity',\n        'network',\n        'location'\n        // 'categories',\n        // 'partners',\n        // 'actions',\n    ];\n\n    database: TrainingService | null;\n    datasource: Source | null;\n    selection = new SelectionModel<Training>(true, []);\n    Training: Training | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: TrainingService, private router: Router){\n        super();\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new TrainingService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    success(){\n        this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n            this.router.navigate(['/organisation/training/page']);\n        });\n        this.toast('bg-green','That record has been successfully deleted');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','That record is in use somewhere, you have to delete its dependance first!');\n        console.error(err);\n    }\n\n    // add(){\n    //     this.router.navigate(['configuration/Training/form']);\n    // }\n\n    // edit(row){\n    //     this.router.navigate(['configuration/Training/form'],{state:{place: row}});\n    // }\n\n    // delete(row): void {\n    //     const dialogRef = this.dialog.open(DeleteComponent, {});\n    //     this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\n    //         if (result === 1) {\n    //             this.factory.deleteTraining(row.id).subscribe(\n    //                 (res) => this.success(),\n    //                 (err: HttpErrorResponse)=>this.error(err)\n    //             );\n    //             this.load();\n    //         }\n    //     });\n    // }\n\n    displayManagers(managers) {\n        let display = '';\n        if (managers.length > 0) {\n            if (managers.length == 1) {\n                display = managers[0].fullname;\n            } else if (managers.length == 2){\n                display = managers[0].fullname + ' & ' + managers[1].fullname;\n            } else {\n                display = managers[0].fullname + ' & ' +  (managers.length-1) + ' autres';\n            }\n        }\n        return display;\n    }\n}\n\n\nexport class Source extends DataSource<Training> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: Training[] = [];\n    renderedData: Training[] = [];\n\n    constructor(public service: TrainingService, public paginator: MatPaginator, public ms: MatSort){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<Training[]>{\n        const displayDataChanges = [\n            this.service.dataChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n        this.service.getTrainings();\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.data\n                    .slice()\n                    .filter((training: Training) => {\n                        const search = (\n                            training.topic.title\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: Training[]): Training[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'name':\n                    [propertyA, propertyB] = [a.topic.title, b.topic.title];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n\n}\n","import {NgModule } from '@angular/core';\nimport {Routes, RouterModule } from '@angular/router';\nimport {TrainingBroadcastComponent} from \"./broadcast/training.broadcast.component\";\nimport {TrainingBroadcastCompletionComponent} from \"./broadcast-completion/training.broadcast.completion.component\";\nimport {TrainingPageComponent} from \"./page/training.page.component\";\n\n\nconst routes: Routes = [\n    {\n        path: 'broadcast',\n        component: TrainingBroadcastComponent,\n    },\n    {\n        path: 'page',\n        component: TrainingPageComponent,\n    },\n    {\n        path: 'broadcast-completion',\n        component: TrainingBroadcastCompletionComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TrainingRoutingModule {}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {NgxMaskModule} from \"ngx-mask\";\nimport {TrainingBroadcastComponent} from \"./broadcast/training.broadcast.component\";\nimport {TrainingRoutingModule} from \"./training-routing.module\";\nimport {TrainingService} from \"./training.service\";\nimport {InstitutionService} from \"../../configuration/institution/institution.service\";\nimport {TrainingBroadcastCompletionComponent} from \"./broadcast-completion/training.broadcast.completion.component\";\nimport {TrainingPageComponent} from \"./page/training.page.component\";\nimport {TopicService} from \"../../configuration/topic/topic.service\";\n\n@NgModule({\n    declarations: [\n        TrainingBroadcastComponent,\n        TrainingBroadcastCompletionComponent,\n        TrainingPageComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSnackBarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        MatSortModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        MaterialFileInputModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        TranslateModule,\n        TrainingRoutingModule,\n        NgxDatatableModule,\n        NgxMaskModule,\n        MatAutocompleteModule\n    ],\n    providers: [TrainingService, InstitutionService, TopicService]\n})\n\nexport class TrainingModule {}"]}