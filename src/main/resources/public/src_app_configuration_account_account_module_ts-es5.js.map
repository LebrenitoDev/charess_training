{"version":3,"sources":["webpack:///src/app/configuration/account/account-routing.module.ts","webpack:///src/app/configuration/account/account.module.ts","webpack:///src/app/configuration/account/form/account.form.component.html","webpack:///src/app/configuration/account/form/account.form.component.ts","webpack:///src/app/configuration/account/page/account.page.component.html","webpack:///src/app/configuration/account/page/account.page.component.ts","webpack:///src/app/core/models/security/person.ts","webpack:///src/app/core/models/security/user.ts"],"names":["routes","path","component","AccountPageComponent","AccountRoutingModule","RouterModule","AccountModule","AccountService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","MatTooltipModule","MatAutocompleteModule","PerfectScrollbarModule","NgbModule","AccountFormComponent","fm","data","service","fb","snack","router","profiles","institutions","action","usr","title","User","fg","create","getProfiles","subscribe","res","getInstitutions","value","filter","profile","name","toLowerCase","includes","group","id","username","Validators","locale","status","institution","person","firstName","lastName","email","a","b","getRawValue","success","navigateByUrl","skipLocationChange","then","navigate","err","error","close","toast","console","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","MAT_DIALOG_DATA","submit","cancel","$event","stopPropagation","selection","http","dialog","factory","displayedColumns","SelectionModel","dim","width","height","contextMenuPosition","x","y","database","datasource","Source","paginator","sort","subs","sink","fromEvent","nativeElement","load","row","selected","ob","tp","users","forEach","u","push","change","array","length","update","numSelected","numRows","renderedData","isAllSelected","clear","select","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","edit","add","ms","filterChange","BehaviorSubject","filteredData","pageIndex","next","displayDataChanges","dataChange","sortChange","page","getUsers","merge","pipe","map","slice","search","indexOf","sortedData","sortData","startIndex","pageSize","splice","active","direction","propertyA","propertyB","valueA","isNaN","valueB","DataSource","Person","identifier","gender"],"mappings":"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","file":"src_app_configuration_account_account_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AccountPageComponent} from \"./page/account.page.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'page',\r\n        component: AccountPageComponent\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\n\r\nexport class AccountRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\r\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\r\nimport {AccountRoutingModule} from \"./account-routing.module\";\r\nimport {AccountPageComponent} from \"./page/account.page.component\";\r\nimport {AccountService} from \"./account.service\";\r\nimport {AccountFormComponent} from \"./form/account.form.component\";\r\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\r\nimport {PerfectScrollbarModule} from \"ngx-perfect-scrollbar\";\r\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AccountPageComponent,\r\n        AccountFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        MaterialFileInputModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        TranslateModule,\r\n        NgxDatatableModule,\r\n        MatTooltipModule,\r\n        MatAutocompleteModule,\r\n        PerfectScrollbarModule,\r\n        AccountRoutingModule,\r\n        NgbModule\r\n    ],\r\n    providers: [\r\n        AccountService\r\n    ]\r\n})\r\n\r\nexport class AccountModule {}\r\n","<div class=\"addContainer\">\n    <div class=\"modalHeader\">\n        <div class=\"editRowModal\">\n            <div class=\"modalHeader clearfix\">\n                <div class=\"modal-about\">\n                    <div><h4><strong>{{title | translate}}</strong></h4></div>\n                </div>\n            </div>\n        </div>\n        <button mat-icon-button (click)=\"fm.close()\" aria-label=\"Close dialog\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <div mat-dialog-content>\n        <form class=\"register-form m-4\" [formGroup]=\"fg\" (ngSubmit)=\"submit\">\n            <div class=\"row\">\n                <input matInput formControlName=\"id\" [hidden]=true>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'First Name' | translate}}</mat-label>\n                        <input matInput formControlName=\"firstName\" required>\n                        <mat-error *ngIf=\"fg.get('person.firstName').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                        <input matInput formControlName=\"id\" [hidden]=true>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'Last Name' | translate}}</mat-label>\n                        <input matInput formControlName=\"lastName\" required>\n                        <mat-error *ngIf=\"fg.get('person.lastName').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Username' | translate}}</mat-label>\n                        <input matInput formControlName=\"username\" required>\n                        <mat-error *ngIf=\"fg.get('username').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-3\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Locale' | translate}}</mat-label>\n                        <mat-select formControlName=\"locale\" required>\n                            <mat-option [value]=\"'en'\">Anglais</mat-option>\n                            <mat-option [value]=\"'fr'\">Français</mat-option>\n                            <mat-option [value]=\"'kr'\">Créole Haïtien</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"fg.get('locale').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-5\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Profile' | translate}}</mat-label>\n                        <mat-select [compareWith]=\"compare\" formControlName=\"profile\">\n                            <mat-option *ngFor=\"let pro of profiles\" [value]=\"pro\">{{pro.name}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\" formGroupName=\"person\">\n                        <mat-label>{{'Email' | translate}}</mat-label>\n                        <input matInput formControlName=\"email\" required>\n                        <mat-error *ngIf=\"fg.get('person.email').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-6\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>{{'Place of work' | translate}}</mat-label>\n                        <mat-select [compareWith]=\"compare\" formControlName=\"institution\" required>\n                            <mat-option *ngFor=\"let institution of institutions\" [value]=\"institution\">{{institution.name}}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"fg.get('institution').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                    <div class=\"example-button-row\">\n                        <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\" [mat-dialog-close]=\"1\"\n                                (click)=\"submit()\">{{'Save' | translate}}</button>\n                        <button mat-raised-button color=\"warn\" (click)=\"cancel()\" tabindex=\"-1\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Component, Inject, OnInit, ViewChild} from '@angular/core';\nimport {\n    FormGroup,\n    FormBuilder, Validators, FormControl,\n} from '@angular/forms';\n\nimport { Observable, map, startWith } from 'rxjs';\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {AccountService} from \"../account.service\";\nimport {User} from \"../../../core/models/security/user\";\nimport {Profile} from \"../../../core/models/security/profile\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './account.form.component.html'\n})\n\nexport class AccountFormComponent implements OnInit {\n\n    action: string;\n    title: string;\n    fg: FormGroup;\n    usr: User;\n    profiles=[];\n    institutions=[];\n\n    constructor(public fm: MatDialogRef<AccountFormComponent>, @Inject(MAT_DIALOG_DATA) public data: any, public service: AccountService,\n                private fb: FormBuilder, private snack: MatSnackBar, private router: Router){\n        this.action = data.action;\n        if (this.action === 'edit') {\n            this.usr = data.usr;\n            this.title = 'Edit the current usr';\n        } else{\n            this.title = 'New account';\n            this.usr = new User({});\n        }\n        this.fg = this.create();\n    }\n\n    ngOnInit() {\n        this.service.getProfiles().subscribe((res)=>{\n            this.profiles = res;\n        });\n        this.service.getInstitutions().subscribe((res)=>{\n            this.institutions = res;\n        });\n    }\n\n    _filter(value: string): Profile[] {\n        return this.profiles.filter(profile=>profile.name.toLowerCase().includes(typeof value === 'string'?value.toLowerCase():value));\n    }\n\n    display(profile):string {\n        if(profile)\n            return profile.name;\n    }\n\n    create(): FormGroup {\n        return this.fb.group({\n            id: [this.usr.id],\n            username: [this.usr.username, [Validators.required]],\n            locale: [this.usr.locale, [Validators.required]],\n            profile: [this.usr.profile],\n            status: [this.usr.status],\n            institution: [this.usr.institution, [Validators.required]],\n            person: this.fb.group({\n                id: [this.usr.person.id],\n                firstName: [this.usr.person.firstName, [Validators.required]],\n                lastName: [this.usr.person.lastName, [Validators.required]],\n                email: [this.usr.person.email, [Validators.required]],\n            })\n        });\n    }\n\n    compare(a, b): boolean {\n        return a && b ?(a.id && b.id && a.id===b.id):a===b;\n    }\n\n    submit() {\n        this.service.create(this.fg.getRawValue()).subscribe(\n            data => {\n                this.success();\n                this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n                    this.router.navigate(['/configuration/account/page']);\n                });\n            },\n            (err: HttpErrorResponse) => this.error(err)\n        );\n    }\n\n    cancel(): void {\n        this.fm.close();\n    }\n\n    private success(){\n        this.toast('bg-green','The usr has been successfully created');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{'training.configuration.list.account' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                        </div>\n                                        <div class=\"col-4\">\n                                            <ul class=\"header-buttons\">\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab (click)=\"update('password', 'password')\" matTooltip=\"Réinitialiser mot de passe\">\n                                                            <mat-icon class=\"col-white\">restart_alt</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li ngbDropdown [hidden]=!selection.hasValue()>\n                                                    <div class=\"icon-button-demo nav-notification-icons pt-0\" ngbDropdownToggle>\n                                                        <button mat-mini-fab color=\"white\" matTooltip=\"Profile d'utilisateur\">\n                                                            <mat-icon>format_list_bulleted</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                    <div ngbDropdownMenu class=\"downlist\">\n                                                        <ul class=\"menu\">\n                                                            <li class=\"body\"><a href=\"#\" *ngFor=\"let p of profiles\" (click)=\"update(p, 'profile')\">{{p.name}}</a></li>\n                                                        </ul>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"update('USER_ACTIVE', 'status')\" matTooltip=\"Activer\">\n                                                            <mat-icon class=\"col-white\">notifications</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=!selection.hasValue()>\n                                                        <button mat-mini-fab color=\"warn\" (click)=\"update('USER_INACTIVE', 'status')\" matTooltip=\"Désactiver\">\n                                                            <mat-icon class=\"col-white\">notifications_off</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=\"selection.selected.length !== 1\">\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"edit()\" matTooltip=\"Editer\">\n                                                            <mat-icon class=\"col-white\">edit</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"icon-button-demo\" [hidden]=selection.hasValue()>\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"add()\" matTooltip=\"Ajouter\">\n                                                            <mat-icon class=\"col-white\">add</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <ng-container matColumnDef=\"select\">\n                                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                                                          [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"username\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Username'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.username}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"fullname\" >\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'user.fullname'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">{{row.person.fullname}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"profile\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Profile'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.profile?.name}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"institution\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Place of work'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.institution?.name}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Status'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{chg(row.status)}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"email\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Email'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.person.email}}</mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"locale\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Locale'|translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">{{row.locale=='en'?'Anglais':(row.locale=='fr'?'Fran&ccedil;ais':'Créole Haïtien')}}</mat-cell>\n                                    </ng-container>\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { UnsubscribeOnDestroyAdapter } from 'src/app/shared/UnsubscribeOnDestroyAdapter';\nimport {AccountService} from \"../account.service\";\nimport {User} from \"../../../core/models/security/user\";\nimport {AccountFormComponent} from \"../form/account.form.component\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './account.page.component.html'\n})\n\nexport class AccountPageComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'select',\n        'username',\n        'fullname',\n        'profile',\n        'email',\n        'locale',\n        'status',\n        'institution'\n    ];\n    database: AccountService | null;\n    datasource: Source | null;\n    selection = new SelectionModel<User>(true, []);\n    usr: User | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: AccountService, private router: Router){\n        super();\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new AccountService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n        this.factory.getProfiles().subscribe((res)=>{\n            this.profiles = res;\n        });\n    }\n\n    add(){\n        this.dialog.open(AccountFormComponent, {\n            ...this.dim,\n            data: {\n                usr: this.usr,\n                action: 'add',\n            }\n        });\n    }\n\n    edit() {\n        const row = this.selection.selected[0];\n        this.dialog.open(AccountFormComponent, {\n            ...this.dim,\n            data: {\n                usr: row,\n                action: 'edit',\n            }\n        });\n    }\n\n    update(ob, tp){\n        if(!ob)\n            return;\n        let users = [];\n        this.selection.selected.forEach((u) => {\n            if(tp === 'status') {\n                if(u.status != ob){\n                    u.status = ob;\n                }\n            } else if(tp === 'profile'){\n                if(!u.profile || u.profile.id != ob.id){\n                    u.profile = ob;\n                    u.status = 'USER_ACTIVE';\n                }\n            } else {\n                if(u.status ==='USER_ACTIVE'){\n                    u.status = 'USER_PENDING';\n                }\n            }\n            users.push(u);\n        });\n        this.change(users);\n    }\n\n    change(array){\n        if(array.length > 0){\n            this.factory.update(array).subscribe(\n                data => {\n                    this.success();\n                    this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n                        this.router.navigate(['/configuration/account/page']);\n                    });\n                },\n                (err: HttpErrorResponse) => this.error(err)\n            );\n        }\n    }\n\n    chg(ob){\n        switch (ob) {\n            case 'USER_ACTIVE':\n                return 'Actif';\n            case 'USER_LOCKED':\n                return 'Vérouillé';\n            case 'USER_PENDING':\n                return 'Pendant';\n            case 'USER_INACTIVE':\n                return 'Inactif';\n        }\n    }\n\n    private success(){\n        this.toast('bg-green','Operation successfully terminated');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','Operation failed! Please, contact your sys admin');\n        console.error(err);\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right',panelClass: color,\n        });\n    }\n\n    isAllSelected() {\n        const numSelected = this.selection.selected.length;\n        const numRows = this.datasource.renderedData.length;\n        return numSelected === numRows;\n    }\n\n    masterToggle() {\n        this.isAllSelected()? this.selection.clear(): this.datasource.renderedData.forEach((row) => this.selection.select(row));\n    }\n}\n\n\nexport class Source extends DataSource<User> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: User[] = [];\n    renderedData: User[] = [];\n\n    constructor(public service: AccountService, public paginator: MatPaginator, public ms: MatSort){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<User[]>{\n        const displayDataChanges = [\n            this.service.dataChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n        this.service.getUsers();\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.data\n                    .slice()\n                    .filter((usr: User) => {\n                        const search = (\n                            usr.username\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: User[]): User[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'username':\n                    [propertyA, propertyB] = [a.username, b.username];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n\n}\n","import * as moment from 'moment';\n\nexport class Person {\n    id: number;\n    identifier: string;\n    firstName: string;\n    lastName: string;\n    gender: string;\n    phone: string;\n    email: string;\n    birthDate: moment.Moment;\n    locationAddress: Location;\n    textAddress: string;\n    fullname: string;\n    alias: string;\n\n    constructor(person) {\n        {\n            this.id = person.id;\n            this.identifier = person.identifier;\n            this.firstName = person.firstName;\n            this.lastName = person.lastName;\n            this.gender = person.gender;\n        }\n    }\n}","import { Profile } from './profile';\r\nimport { Locale } from './locale';\r\nimport { Person } from './person';\r\nimport {Institution} from \"../../../configuration/institution/institution.model\";\r\n\r\nexport class User {\r\n    id: number;\r\n    username: string;\r\n    person: Person;\r\n    locale: Locale;\r\n    status: string;\r\n    profile?: Profile;\r\n    institution?: Institution;\r\n    img?: string;\r\n    token?: string;\r\n\r\n    constructor(usr) {\r\n        {\r\n            this.id = usr?.id;\r\n            this.username = usr?.username;\r\n            this.profile = usr?.profile;\r\n            this.institution = usr?.institution;\r\n            this.status = usr.status;\r\n            this.person = usr.person?usr.person:new Person({});\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}